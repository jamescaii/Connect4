// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var List = require("bs-platform/lib/js/list.js");
var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var $$String = require("bs-platform/lib/js/string.js");
var Caml_obj = require("bs-platform/lib/js/caml_obj.js");
var Pervasives = require("bs-platform/lib/js/pervasives.js");
var Caml_format = require("bs-platform/lib/js/caml_format.js");
var CS17SetupGame$Project3 = require("./CS17SetupGame.bs.js");

function otherPlayer(play) {
  if (play) {
    return /* P1 */0;
  } else {
    return /* P2 */1;
  }
}

function stringOfPlayer(stp) {
  if (stp) {
    return "P2";
  } else {
    return "P1";
  }
}

function stringOfMove(param) {
  return String(param[0]);
}

function transpose(mat) {
  if (mat) {
    var match = mat[0];
    if (match) {
      if (match[1]) {
        return /* :: */[
                List.map(List.hd, mat),
                transpose(List.map(List.tl, mat))
              ];
      } else {
        return /* :: */[
                List.concat(mat),
                /* [] */0
              ];
      }
    } else {
      return Pervasives.failwith("Board cannot be 0-dimensional.");
    }
  } else {
    return Pervasives.failwith("Board cannot be 0-dimensional.");
  }
}

function stringOfSlot(slt) {
  if (slt) {
    if (slt[0]) {
      return "[X]";
    } else {
      return "[O]";
    }
  } else {
    return "[ ]";
  }
}

function stringOfList(lst) {
  if (lst) {
    return "[" + ($$String.concat(" ", List.map(stringOfSlot, /* :: */[
                      lst[0],
                      lst[1]
                    ])) + "]");
  } else {
    return Pervasives.failwith("empty column does not exist");
  }
}

function stringOfBoard(brd) {
  var match = transpose(brd);
  if (match) {
    return $$String.concat("\n", List.map(stringOfList, /* :: */[
                    match[0],
                    match[1]
                  ]));
  } else {
    return Pervasives.failwith("cannot convert empty board to string");
  }
}

function stringOfState(param) {
  return stringOfBoard(param[1]);
}

function create(a, b) {
  if (b !== 0) {
    return /* :: */[
            a,
            create(a, CS17SetupGame$Project3.$neg(b, 1))
          ];
  } else {
    return /* [] */0;
  }
}

function createBoard(columns, rows) {
  return create(create(/* Empty */0, columns), rows);
}

var initialState_000 = /* Ongoing */Block.__(1, [/* P1 */0]);

var initialState_001 = createBoard(5, 7);

var initialState = /* State */[
  initialState_000,
  initialState_001
];

function legalMoves(param) {
  var movesHelper = function (_x, _y) {
    while(true) {
      var y = _y;
      var x = _x;
      if (x) {
        var tl = x[1];
        if (x[0] === /* Empty */0) {
          return /* :: */[
                  /* Move */[y],
                  movesHelper(tl, CS17SetupGame$Project3.$plus(y, 1))
                ];
        } else {
          _y = CS17SetupGame$Project3.$plus(y, 1);
          _x = tl;
          continue ;
        }
      } else {
        return /* [] */0;
      }
    };
  };
  return movesHelper(List.hd(transpose(param[1])), 1);
}

function gameStatus(param) {
  return param[0];
}

function drop(i, board, p) {
  var dropIn = function (col, player) {
    if (col) {
      var hd1 = col[0];
      if (!hd1 && !col[1]) {
        return /* :: */[
                /* Player */[player],
                /* [] */0
              ];
      }
      var match = col[1];
      if (match) {
        var tl = match[1];
        var hd2 = match[0];
        if (hd1) {
          return Pervasives.failwith("invalid input");
        } else if (hd2) {
          return /* :: */[
                  /* Player */[player],
                  /* :: */[
                    hd2,
                    tl
                  ]
                ];
        } else {
          return /* :: */[
                  hd1,
                  dropIn(/* :: */[
                        hd2,
                        tl
                      ], player)
                ];
        }
      } else {
        return Pervasives.failwith("the input must me a list(slot)");
      }
    } else {
      return Pervasives.failwith("passed a completly full column");
    }
  };
  if (board) {
    var tl = board[1];
    var hd = board[0];
    if (i === 1) {
      return /* :: */[
              dropIn(hd, p),
              tl
            ];
    } else {
      return /* :: */[
              hd,
              drop(CS17SetupGame$Project3.$neg(i, 1), tl, p)
            ];
    }
  } else {
    return Pervasives.failwith("input must be a list of lists with at least int columns");
  }
}

function checkWinCol(_board, p) {
  while(true) {
    var board = _board;
    var checkWinColhelper = function (_column, p) {
      while(true) {
        var column = _column;
        if (column) {
          var match = column[1];
          if (match) {
            var match$1 = match[1];
            if (match$1) {
              var match$2 = match$1[1];
              if (match$2) {
                var tl = match$2[1];
                var hd4 = match$2[0];
                var hd3 = match$1[0];
                var hd2 = match[0];
                var hd1 = column[0];
                if (tl) {
                  if (Caml_obj.caml_equal(hd1, hd2) && Caml_obj.caml_equal(hd2, hd3) && Caml_obj.caml_equal(hd3, hd4) && Caml_obj.caml_equal(hd4, /* Player */[p])) {
                    return true;
                  } else {
                    _column = /* :: */[
                      hd2,
                      /* :: */[
                        hd3,
                        /* :: */[
                          hd4,
                          tl
                        ]
                      ]
                    ];
                    continue ;
                  }
                } else if (Caml_obj.caml_equal(hd1, hd2) && Caml_obj.caml_equal(hd2, hd3) && Caml_obj.caml_equal(hd3, hd4)) {
                  return Caml_obj.caml_equal(hd4, /* Player */[p]);
                } else {
                  return false;
                }
              } else {
                return Pervasives.failwith("the input must be a list(slot)");
              }
            } else {
              return Pervasives.failwith("the input must be a list(slot)");
            }
          } else {
            return Pervasives.failwith("the input must be a list(slot)");
          }
        } else {
          return Pervasives.failwith("the input must be a list(slot)");
        }
      };
    };
    if (board) {
      if (checkWinColhelper(board[0], p) === true) {
        return /* Win */Block.__(0, [p]);
      } else {
        _board = board[1];
        continue ;
      }
    } else {
      return /* Ongoing */Block.__(1, [p ? /* P1 */0 : /* P2 */1]);
    }
  };
}

function checkWinRow(board, p) {
  return checkWinCol(transpose(board), p);
}

function checkDiaUp(_board, p) {
  while(true) {
    var board = _board;
    var checkDiaUphelper = function (_board, p, i) {
      while(true) {
        var board = _board;
        if (board) {
          var match = board[0];
          if (match) {
            var tl1 = match[1];
            var a = match[0];
            if (tl1) {
              var match$1 = tl1[1];
              if (match$1) {
                var match$2 = match$1[1];
                if (match$2 && !match$2[1]) {
                  var match$3 = board[1];
                  if (match$3) {
                    var match$4 = match$3[0];
                    if (match$4) {
                      var match$5 = match$4[1];
                      if (match$5) {
                        var match$6 = match$5[1];
                        if (match$6) {
                          var match$7 = match$6[1];
                          if (match$7 && !match$7[1]) {
                            var match$8 = match$3[1];
                            if (match$8) {
                              var match$9 = match$8[0];
                              if (match$9) {
                                var match$10 = match$9[1];
                                if (match$10) {
                                  var match$11 = match$10[1];
                                  if (match$11) {
                                    var match$12 = match$11[1];
                                    if (match$12 && !match$12[1]) {
                                      var match$13 = match$8[1];
                                      if (match$13) {
                                        var match$14 = match$13[0];
                                        if (match$14) {
                                          var match$15 = match$14[1];
                                          if (match$15) {
                                            var match$16 = match$15[1];
                                            if (match$16) {
                                              var match$17 = match$16[1];
                                              if (match$17 && !match$17[1]) {
                                                if (match$13[1]) {
                                                  return Pervasives.failwith("input must be a list(list(slot))");
                                                } else {
                                                  var y = match$17[0];
                                                  var k = match$11[0];
                                                  var f = match$5[0];
                                                  if (Caml_obj.caml_equal(a, f) && Caml_obj.caml_equal(f, k) && Caml_obj.caml_equal(k, y)) {
                                                    return Caml_obj.caml_equal(y, /* Player */[p]);
                                                  } else {
                                                    return false;
                                                  }
                                                }
                                              }
                                              
                                            }
                                            
                                          }
                                          
                                        } else {
                                          return Pervasives.failwith("input must be a list(list(slot))");
                                        }
                                      } else {
                                        return Pervasives.failwith("input must be a list(list(slot))");
                                      }
                                    }
                                    
                                  }
                                  
                                }
                                
                              } else {
                                return Pervasives.failwith("input must be a list(list(slot))");
                              }
                            } else {
                              return Pervasives.failwith("input must be a list(list(slot))");
                            }
                          }
                          
                        }
                        
                      }
                      
                    } else {
                      return Pervasives.failwith("input must be a list(list(slot))");
                    }
                  } else {
                    return Pervasives.failwith("input must be a list(list(slot))");
                  }
                }
                
              }
              
            }
            var match$18 = board[1];
            if (match$18) {
              var match$19 = match$18[0];
              if (match$19) {
                var match$20 = match$18[1];
                if (match$20) {
                  var match$21 = match$20[0];
                  if (match$21) {
                    var match$22 = match$20[1];
                    if (match$22) {
                      var match$23 = match$22[0];
                      if (match$23 && !match$22[1]) {
                        var tl4 = match$23[1];
                        var hd4 = match$23[0];
                        var tl3 = match$21[1];
                        var hd3 = match$21[0];
                        var tl2 = match$19[1];
                        var hd2 = match$19[0];
                        if (Caml_obj.caml_equal(List.nth(/* :: */[
                                    a,
                                    tl1
                                  ], i), List.nth(/* :: */[
                                    hd2,
                                    tl2
                                  ], CS17SetupGame$Project3.$plus(i, 1))) && Caml_obj.caml_equal(List.nth(/* :: */[
                                    hd2,
                                    tl2
                                  ], CS17SetupGame$Project3.$plus(i, 1)), List.nth(/* :: */[
                                    hd3,
                                    tl3
                                  ], CS17SetupGame$Project3.$plus(i, 2))) && Caml_obj.caml_equal(List.nth(/* :: */[
                                    hd3,
                                    tl3
                                  ], CS17SetupGame$Project3.$plus(i, 2)), List.nth(/* :: */[
                                    hd4,
                                    tl4
                                  ], CS17SetupGame$Project3.$plus(i, 3))) && Caml_obj.caml_equal(List.nth(/* :: */[
                                    hd4,
                                    tl4
                                  ], CS17SetupGame$Project3.$plus(i, 3)), /* Player */[p])) {
                          return true;
                        } else {
                          _board = /* :: */[
                            tl1,
                            /* :: */[
                              tl2,
                              /* :: */[
                                tl3,
                                /* :: */[
                                  tl4,
                                  /* [] */0
                                ]
                              ]
                            ]
                          ];
                          continue ;
                        }
                      } else {
                        return Pervasives.failwith("input must be a list(list(slot))");
                      }
                    } else {
                      return Pervasives.failwith("input must be a list(list(slot))");
                    }
                  } else {
                    return Pervasives.failwith("input must be a list(list(slot))");
                  }
                } else {
                  return Pervasives.failwith("input must be a list(list(slot))");
                }
              } else {
                return Pervasives.failwith("input must be a list(list(slot))");
              }
            } else {
              return Pervasives.failwith("input must be a list(list(slot))");
            }
          } else {
            return Pervasives.failwith("input must be a list(list(slot))");
          }
        } else {
          return Pervasives.failwith("input must be a list(list(slot))");
        }
      };
    };
    if (board) {
      var match = board[1];
      if (match) {
        var match$1 = match[1];
        if (match$1) {
          var match$2 = match$1[1];
          if (match$2) {
            var tl = match$2[1];
            var hd4 = match$2[0];
            var hd3 = match$1[0];
            var hd2 = match[0];
            if (tl) {
              if (checkDiaUphelper(/* :: */[
                      board[0],
                      /* :: */[
                        hd2,
                        /* :: */[
                          hd3,
                          /* :: */[
                            hd4,
                            /* [] */0
                          ]
                        ]
                      ]
                    ], p, 1) === true) {
                return /* Win */Block.__(0, [p]);
              } else {
                _board = /* :: */[
                  hd2,
                  /* :: */[
                    hd3,
                    /* :: */[
                      hd4,
                      tl
                    ]
                  ]
                ];
                continue ;
              }
            } else if (checkDiaUphelper(board, p, 1) === true) {
              return /* Win */Block.__(0, [p]);
            } else {
              return /* Ongoing */Block.__(1, [p ? /* P1 */0 : /* P2 */1]);
            }
          } else {
            return Pervasives.failwith("input must be a list(list(slot)) with at least four lists");
          }
        } else {
          return Pervasives.failwith("input must be a list(list(slot)) with at least four lists");
        }
      } else {
        return Pervasives.failwith("input must be a list(list(slot)) with at least four lists");
      }
    } else {
      return Pervasives.failwith("input must be a list(list(slot)) with at least four lists");
    }
  };
}

function checkDiaDown(_board, p) {
  while(true) {
    var board = _board;
    var checkDiaDownhelper = function (_board, p, i) {
      while(true) {
        var board = _board;
        if (board) {
          var match = board[0];
          if (match) {
            var tl1 = match[1];
            if (tl1) {
              var match$1 = tl1[1];
              if (match$1) {
                var match$2 = match$1[1];
                if (match$2 && !match$2[1]) {
                  var match$3 = board[1];
                  if (match$3) {
                    var match$4 = match$3[0];
                    if (match$4) {
                      var match$5 = match$4[1];
                      if (match$5) {
                        var match$6 = match$5[1];
                        if (match$6) {
                          var match$7 = match$6[1];
                          if (match$7 && !match$7[1]) {
                            var match$8 = match$3[1];
                            if (match$8) {
                              var match$9 = match$8[0];
                              if (match$9) {
                                var match$10 = match$9[1];
                                if (match$10) {
                                  var match$11 = match$10[1];
                                  if (match$11) {
                                    var match$12 = match$11[1];
                                    if (match$12 && !match$12[1]) {
                                      var match$13 = match$8[1];
                                      if (match$13) {
                                        var match$14 = match$13[0];
                                        if (match$14) {
                                          var match$15 = match$14[1];
                                          if (match$15) {
                                            var match$16 = match$15[1];
                                            if (match$16) {
                                              var match$17 = match$16[1];
                                              if (match$17 && !match$17[1]) {
                                                if (match$13[1]) {
                                                  return Pervasives.failwith("input must be a list(list(slot)) with at least four lists");
                                                } else {
                                                  var m = match$14[0];
                                                  var j = match$10[0];
                                                  var g = match$6[0];
                                                  if (Caml_obj.caml_equal(match$2[0], g) && Caml_obj.caml_equal(g, j) && Caml_obj.caml_equal(j, m)) {
                                                    return Caml_obj.caml_equal(m, /* Player */[p]);
                                                  } else {
                                                    return false;
                                                  }
                                                }
                                              }
                                              
                                            }
                                            
                                          }
                                          
                                        } else {
                                          return Pervasives.failwith("input must be a list(list(slot)) with at least four lists");
                                        }
                                      } else {
                                        return Pervasives.failwith("input must be a list(list(slot)) with at least four lists");
                                      }
                                    }
                                    
                                  }
                                  
                                }
                                
                              } else {
                                return Pervasives.failwith("input must be a list(list(slot)) with at least four lists");
                              }
                            } else {
                              return Pervasives.failwith("input must be a list(list(slot)) with at least four lists");
                            }
                          }
                          
                        }
                        
                      }
                      
                    } else {
                      return Pervasives.failwith("input must be a list(list(slot)) with at least four lists");
                    }
                  } else {
                    return Pervasives.failwith("input must be a list(list(slot)) with at least four lists");
                  }
                }
                
              }
              
            }
            var match$18 = board[1];
            if (match$18) {
              var match$19 = match$18[0];
              if (match$19) {
                var match$20 = match$18[1];
                if (match$20) {
                  var match$21 = match$20[0];
                  if (match$21) {
                    var match$22 = match$20[1];
                    if (match$22) {
                      var match$23 = match$22[0];
                      if (match$23 && !match$22[1]) {
                        var tl4 = match$23[1];
                        var hd4 = match$23[0];
                        var tl3 = match$21[1];
                        var hd3 = match$21[0];
                        var tl2 = match$19[1];
                        var hd2 = match$19[0];
                        if (Caml_obj.caml_equal(List.nth(/* :: */[
                                    match[0],
                                    tl1
                                  ], i), List.nth(/* :: */[
                                    hd2,
                                    tl2
                                  ], CS17SetupGame$Project3.$neg(i, 1))) && Caml_obj.caml_equal(List.nth(/* :: */[
                                    hd2,
                                    tl2
                                  ], CS17SetupGame$Project3.$neg(i, 1)), List.nth(/* :: */[
                                    hd3,
                                    tl3
                                  ], CS17SetupGame$Project3.$neg(i, 2))) && Caml_obj.caml_equal(List.nth(/* :: */[
                                    hd3,
                                    tl3
                                  ], CS17SetupGame$Project3.$neg(i, 2)), List.nth(/* :: */[
                                    hd4,
                                    tl4
                                  ], CS17SetupGame$Project3.$neg(i, 3))) && Caml_obj.caml_equal(List.nth(/* :: */[
                                    hd4,
                                    tl4
                                  ], CS17SetupGame$Project3.$neg(i, 3)), /* Player */[p])) {
                          return true;
                        } else {
                          _board = /* :: */[
                            tl1,
                            /* :: */[
                              tl2,
                              /* :: */[
                                tl3,
                                /* :: */[
                                  tl4,
                                  /* [] */0
                                ]
                              ]
                            ]
                          ];
                          continue ;
                        }
                      } else {
                        return Pervasives.failwith("input must be a list(list(slot)) with at least four lists");
                      }
                    } else {
                      return Pervasives.failwith("input must be a list(list(slot)) with at least four lists");
                    }
                  } else {
                    return Pervasives.failwith("input must be a list(list(slot)) with at least four lists");
                  }
                } else {
                  return Pervasives.failwith("input must be a list(list(slot)) with at least four lists");
                }
              } else {
                return Pervasives.failwith("input must be a list(list(slot)) with at least four lists");
              }
            } else {
              return Pervasives.failwith("input must be a list(list(slot)) with at least four lists");
            }
          } else {
            return Pervasives.failwith("input must be a list(list(slot)) with at least four lists");
          }
        } else {
          return Pervasives.failwith("input must be a list(list(slot)) with at least four lists");
        }
      };
    };
    if (board) {
      var match = board[1];
      if (match) {
        var match$1 = match[1];
        if (match$1) {
          var match$2 = match$1[1];
          if (match$2) {
            var tl = match$2[1];
            var hd4 = match$2[0];
            var hd3 = match$1[0];
            var hd2 = match[0];
            if (tl) {
              if (checkDiaDownhelper(/* :: */[
                      board[0],
                      /* :: */[
                        hd2,
                        /* :: */[
                          hd3,
                          /* :: */[
                            hd4,
                            /* [] */0
                          ]
                        ]
                      ]
                    ], p, 3) === true) {
                return /* Win */Block.__(0, [p]);
              } else {
                _board = /* :: */[
                  hd2,
                  /* :: */[
                    hd3,
                    /* :: */[
                      hd4,
                      tl
                    ]
                  ]
                ];
                continue ;
              }
            } else if (checkDiaDownhelper(board, p, 3) === true) {
              return /* Win */Block.__(0, [p]);
            } else {
              return /* Ongoing */Block.__(1, [p ? /* P1 */0 : /* P2 */1]);
            }
          } else {
            return Pervasives.failwith("input must be a list(list(slot)) with at least four lists");
          }
        } else {
          return Pervasives.failwith("input must be a list(list(slot)) with at least four lists");
        }
      } else {
        return Pervasives.failwith("input must be a list(list(slot)) with at least four lists");
      }
    } else {
      return Pervasives.failwith("input must be a list(list(slot)) with at least four lists");
    }
  };
}

function nextState(param, param$1) {
  var m = param$1[0];
  var i = param[1];
  var s = param[0];
  if (typeof s === "number" || !s.tag) {
    return /* State */[
            s,
            i
          ];
  } else {
    var p = s[0];
    var tmp = true;
    if (!Caml_obj.caml_equal(checkWinCol(drop(m, i, p), p), /* Win */Block.__(0, [p]))) {
      var board = drop(m, i, p);
      tmp = Caml_obj.caml_equal(checkWinCol(transpose(board), p), /* Win */Block.__(0, [p])) || Caml_obj.caml_equal(checkDiaDown(drop(m, i, p), p), /* Win */Block.__(0, [p])) || Caml_obj.caml_equal(checkDiaUp(drop(m, i, p), p), /* Win */Block.__(0, [p]));
    }
    if (tmp) {
      return /* State */[
              /* Win */Block.__(0, [p]),
              drop(m, i, p)
            ];
    } else if (legalMoves(/* State */[
            s,
            drop(m, i, p)
          ]) === /* [] */0) {
      return /* State */[
              /* Draw */0,
              drop(m, i, p)
            ];
    } else {
      return /* State */[
              /* Ongoing */Block.__(1, [p ? /* P1 */0 : /* P2 */1]),
              drop(m, i, p)
            ];
    }
  }
}

function moveOfString(str) {
  try {
    return /* Move */[Caml_format.caml_int_of_string(str)];
  }
  catch (exn){
    return Pervasives.failwith("string input must be an integer");
  }
}

function convertBoardlist(board) {
  var convertBoardDiagonalsUp = function (board) {
    var zip2 = function (f, items, things) {
      if (items) {
        if (things) {
          return /* :: */[
                  Curry._2(f, items[0], things[0]),
                  zip2(f, items[1], things[1])
                ];
        } else {
          return Pervasives.failwith("Domain error");
        }
      } else {
        return things;
      }
    };
    if (board) {
      var row = board[0];
      if (board[1]) {
        if (row) {
          return /* :: */[
                  /* :: */[
                    row[0],
                    /* [] */0
                  ],
                  zip2((function (x, y) {
                          return /* :: */[
                                  x,
                                  y
                                ];
                        }), row[1], convertBoardDiagonalsUp(board[1]))
                ];
        } else {
          return Pervasives.failwith("Domain error: cannot have zero rows");
        }
      } else {
        return List.map((function (x) {
                      return /* :: */[
                              x,
                              /* [] */0
                            ];
                    }), row);
      }
    } else {
      return Pervasives.failwith("board cannot be empty");
    }
  };
  var mat = convertBoardDiagonalsUp(List.map(List.rev, board));
  return Pervasives.$at(board, Pervasives.$at(transpose(board), Pervasives.$at(convertBoardDiagonalsUp(board), List.map(List.rev, mat))));
}

function calculatePointsHelper(list) {
  if (list) {
    var match = list[0];
    if (match) {
      if (match[0]) {
        var match$1 = list[1];
        if (match$1) {
          var match$2 = match$1[0];
          if (match$2) {
            if (match$2[0]) {
              var match$3 = match$1[1];
              if (match$3) {
                var match$4 = match$3[0];
                if (match$4) {
                  if (match$4[0]) {
                    var match$5 = match$3[1];
                    if (match$5 && !(match$5[0] || match$5[1])) {
                      return -16;
                    } else {
                      return 0;
                    }
                  } else {
                    return 0;
                  }
                } else {
                  var match$6 = match$3[1];
                  if (match$6) {
                    var match$7 = match$6[0];
                    if (match$7) {
                      if (match$7[0] && !match$6[1]) {
                        return -16;
                      } else {
                        return 0;
                      }
                    } else if (match$6[1]) {
                      return 0;
                    } else {
                      return -4;
                    }
                  } else {
                    return 0;
                  }
                }
              } else {
                return 0;
              }
            } else {
              return 0;
            }
          } else {
            var match$8 = match$1[1];
            if (match$8) {
              var match$9 = match$8[0];
              if (match$9) {
                if (match$9[0]) {
                  var match$10 = match$8[1];
                  if (match$10) {
                    var match$11 = match$10[0];
                    if (match$11) {
                      if (match$11[0] && !match$10[1]) {
                        return -16;
                      } else {
                        return 0;
                      }
                    } else if (match$10[1]) {
                      return 0;
                    } else {
                      return -4;
                    }
                  } else {
                    return 0;
                  }
                } else {
                  return 0;
                }
              } else {
                var match$12 = match$8[1];
                if (match$12) {
                  var match$13 = match$12[0];
                  if (match$13) {
                    if (match$13[0] && !match$12[1]) {
                      return -4;
                    } else {
                      return 0;
                    }
                  } else if (match$12[1]) {
                    return 0;
                  } else {
                    return -2;
                  }
                } else {
                  return 0;
                }
              }
            } else {
              return 0;
            }
          }
        } else {
          return 0;
        }
      } else {
        var match$14 = list[1];
        if (match$14) {
          var match$15 = match$14[0];
          if (match$15) {
            if (match$15[0]) {
              return 0;
            } else {
              var match$16 = match$14[1];
              if (match$16) {
                var match$17 = match$16[0];
                if (match$17) {
                  if (match$17[0]) {
                    return 0;
                  } else {
                    var match$18 = match$16[1];
                    if (match$18 && !(match$18[0] || match$18[1])) {
                      return 16;
                    } else {
                      return 0;
                    }
                  }
                } else {
                  var match$19 = match$16[1];
                  if (match$19) {
                    var match$20 = match$19[0];
                    if (match$20) {
                      if (match$20[0] || match$19[1]) {
                        return 0;
                      } else {
                        return 16;
                      }
                    } else if (match$19[1]) {
                      return 0;
                    } else {
                      return 4;
                    }
                  } else {
                    return 0;
                  }
                }
              } else {
                return 0;
              }
            }
          } else {
            var match$21 = match$14[1];
            if (match$21) {
              var match$22 = match$21[0];
              if (match$22) {
                if (match$22[0]) {
                  return 0;
                } else {
                  var match$23 = match$21[1];
                  if (match$23) {
                    var match$24 = match$23[0];
                    if (match$24) {
                      if (match$24[0] || match$23[1]) {
                        return 0;
                      } else {
                        return 16;
                      }
                    } else if (match$23[1]) {
                      return 0;
                    } else {
                      return 4;
                    }
                  } else {
                    return 0;
                  }
                }
              } else {
                var match$25 = match$21[1];
                if (match$25) {
                  var match$26 = match$25[0];
                  if (match$26) {
                    if (match$26[0] || match$25[1]) {
                      return 0;
                    } else {
                      return 4;
                    }
                  } else if (match$25[1]) {
                    return 0;
                  } else {
                    return 2;
                  }
                } else {
                  return 0;
                }
              }
            } else {
              return 0;
            }
          }
        } else {
          return 0;
        }
      }
    } else {
      var match$27 = list[1];
      if (match$27) {
        var match$28 = match$27[0];
        if (match$28) {
          if (match$28[0]) {
            var match$29 = match$27[1];
            if (match$29) {
              var match$30 = match$29[0];
              if (match$30) {
                if (match$30[0]) {
                  var match$31 = match$29[1];
                  if (match$31) {
                    var match$32 = match$31[0];
                    if (match$32) {
                      if (match$32[0] && !match$31[1]) {
                        return -16;
                      } else {
                        return 0;
                      }
                    } else if (match$31[1]) {
                      return 0;
                    } else {
                      return -4;
                    }
                  } else {
                    return 0;
                  }
                } else {
                  return 0;
                }
              } else {
                var match$33 = match$29[1];
                if (match$33) {
                  var match$34 = match$33[0];
                  if (match$34) {
                    if (match$34[0] || match$33[1]) {
                      return 0;
                    } else {
                      return -4;
                    }
                  } else if (match$33[1]) {
                    return 0;
                  } else {
                    return -2;
                  }
                } else {
                  return 0;
                }
              }
            } else {
              return 0;
            }
          } else {
            var match$35 = match$27[1];
            if (match$35) {
              var match$36 = match$35[0];
              if (match$36) {
                if (match$36[0]) {
                  return 0;
                } else {
                  var match$37 = match$35[1];
                  if (match$37) {
                    var match$38 = match$37[0];
                    if (match$38) {
                      if (match$38[0] || match$37[1]) {
                        return 0;
                      } else {
                        return 16;
                      }
                    } else if (match$37[1]) {
                      return 0;
                    } else {
                      return 4;
                    }
                  } else {
                    return 0;
                  }
                }
              } else {
                var match$39 = match$35[1];
                if (match$39) {
                  var match$40 = match$39[0];
                  if (match$40) {
                    if (match$40[0] || match$39[1]) {
                      return 0;
                    } else {
                      return 4;
                    }
                  } else if (match$39[1]) {
                    return 0;
                  } else {
                    return 2;
                  }
                } else {
                  return 0;
                }
              }
            } else {
              return 0;
            }
          }
        } else {
          var match$41 = match$27[1];
          if (match$41) {
            var match$42 = match$41[0];
            if (match$42) {
              if (match$42[0]) {
                var match$43 = match$41[1];
                if (match$43) {
                  var match$44 = match$43[0];
                  if (match$44) {
                    if (match$44[0] || match$43[1]) {
                      return 0;
                    } else {
                      return -4;
                    }
                  } else if (match$43[1]) {
                    return 0;
                  } else {
                    return -2;
                  }
                } else {
                  return 0;
                }
              } else {
                var match$45 = match$41[1];
                if (match$45) {
                  var match$46 = match$45[0];
                  if (match$46) {
                    if (match$46[0] || match$45[1]) {
                      return 0;
                    } else {
                      return 4;
                    }
                  } else if (match$45[1]) {
                    return 0;
                  } else {
                    return 2;
                  }
                } else {
                  return 0;
                }
              }
            } else {
              var match$47 = match$41[1];
              if (match$47) {
                var match$48 = match$47[0];
                if (match$48) {
                  if (match$48[0]) {
                    if (match$47[1]) {
                      return 0;
                    } else {
                      return -2;
                    }
                  } else if (match$47[1]) {
                    return 0;
                  } else {
                    return 2;
                  }
                } else {
                  return 0;
                }
              } else {
                return 0;
              }
            }
          } else {
            return 0;
          }
        }
      } else {
        return 0;
      }
    }
  } else {
    return Pervasives.failwith("board cannot be empty");
  }
}

function estimateValue(param) {
  var s = param[0];
  var calculatePoints = function (list) {
    var calculateHelper = function (list) {
      if (list) {
        var match = list[1];
        if (match) {
          var match$1 = match[1];
          if (match$1) {
            var match$2 = match$1[1];
            if (match$2) {
              var tl = match$2[1];
              var hd4 = match$2[0];
              var hd3 = match$1[0];
              var hd2 = match[0];
              var hd1 = list[0];
              if (tl) {
                return CS17SetupGame$Project3.$plus(calculatePointsHelper(/* :: */[
                                hd1,
                                /* :: */[
                                  hd2,
                                  /* :: */[
                                    hd3,
                                    /* :: */[
                                      hd4,
                                      /* [] */0
                                    ]
                                  ]
                                ]
                              ]), calculateHelper(/* :: */[
                                hd2,
                                /* :: */[
                                  hd3,
                                  /* :: */[
                                    hd4,
                                    tl
                                  ]
                                ]
                              ]));
              } else {
                return calculatePointsHelper(/* :: */[
                            hd1,
                            /* :: */[
                              hd2,
                              /* :: */[
                                hd3,
                                /* :: */[
                                  hd4,
                                  /* [] */0
                                ]
                              ]
                            ]
                          ]);
              }
            } else {
              return 0;
            }
          } else {
            return 0;
          }
        } else {
          return 0;
        }
      } else {
        return 0;
      }
    };
    if (list) {
      return CS17SetupGame$Project3.$plus(calculateHelper(list[0]), calculatePoints(list[1]));
    } else {
      return 0;
    }
  };
  if (typeof s === "number") {
    return 0;
  } else if (s.tag) {
    return calculatePoints(convertBoardlist(param[1]));
  } else if (s[0]) {
    return Number.NEGATIVE_INFINITY;
  } else {
    return Number.POSITIVE_INFINITY;
  }
}

var Connect4 = {
  initialCols: 5,
  initialRows: 7,
  names: "Christine and James",
  otherPlayer: otherPlayer,
  stringOfPlayer: stringOfPlayer,
  stringOfMove: stringOfMove,
  transpose: transpose,
  stringOfSlot: stringOfSlot,
  stringOfList: stringOfList,
  stringOfBoard: stringOfBoard,
  stringOfState: stringOfState,
  create: create,
  createBoard: createBoard,
  initialState: initialState,
  legalMoves: legalMoves,
  gameStatus: gameStatus,
  drop: drop,
  checkWinCol: checkWinCol,
  checkWinRow: checkWinRow,
  checkDiaUp: checkDiaUp,
  checkDiaDown: checkDiaDown,
  nextState: nextState,
  moveOfString: moveOfString,
  convertBoardlist: convertBoardlist,
  calculatePointsHelper: calculatePointsHelper,
  estimateValue: estimateValue
};

CS17SetupGame$Project3.checkExpect(/* P2 */1, /* P2 */1, "otherPlayer one");

CS17SetupGame$Project3.checkExpect(/* P1 */0, /* P1 */0, "otherPlayer two");

CS17SetupGame$Project3.checkExpect("P1", "P1", "stringofPlayer one");

CS17SetupGame$Project3.checkExpect("P2", "P2", "stringofPlayer two");

CS17SetupGame$Project3.checkExpect(String(5), "5", "stringOfMove int 5");

CS17SetupGame$Project3.checkExpect(String(8), "8", "stringOfMove int 8");

CS17SetupGame$Project3.checkExpect(transpose(/* :: */[
          /* :: */[
            /* Player */[/* P1 */0],
            /* :: */[
              /* Player */[/* P1 */0],
              /* :: */[
                /* Player */[/* P2 */1],
                /* :: */[
                  /* Player */[/* P1 */0],
                  /* [] */0
                ]
              ]
            ]
          ],
          /* :: */[
            /* :: */[
              /* Empty */0,
              /* :: */[
                /* Empty */0,
                /* :: */[
                  /* Empty */0,
                  /* :: */[
                    /* Empty */0,
                    /* [] */0
                  ]
                ]
              ]
            ],
            /* :: */[
              /* :: */[
                /* Empty */0,
                /* :: */[
                  /* Player */[/* P1 */0],
                  /* :: */[
                    /* Player */[/* P2 */1],
                    /* :: */[
                      /* Player */[/* P1 */0],
                      /* [] */0
                    ]
                  ]
                ]
              ],
              /* :: */[
                /* :: */[
                  /* Empty */0,
                  /* :: */[
                    /* Empty */0,
                    /* :: */[
                      /* Player */[/* P2 */1],
                      /* :: */[
                        /* Player */[/* P1 */0],
                        /* [] */0
                      ]
                    ]
                  ]
                ],
                /* :: */[
                  /* :: */[
                    /* Empty */0,
                    /* :: */[
                      /* Empty */0,
                      /* :: */[
                        /* Empty */0,
                        /* :: */[
                          /* Empty */0,
                          /* [] */0
                        ]
                      ]
                    ]
                  ],
                  /* [] */0
                ]
              ]
            ]
          ]
        ]), /* :: */[
      /* :: */[
        /* Player */[/* P1 */0],
        /* :: */[
          /* Empty */0,
          /* :: */[
            /* Empty */0,
            /* :: */[
              /* Empty */0,
              /* :: */[
                /* Empty */0,
                /* [] */0
              ]
            ]
          ]
        ]
      ],
      /* :: */[
        /* :: */[
          /* Player */[/* P1 */0],
          /* :: */[
            /* Empty */0,
            /* :: */[
              /* Player */[/* P1 */0],
              /* :: */[
                /* Empty */0,
                /* :: */[
                  /* Empty */0,
                  /* [] */0
                ]
              ]
            ]
          ]
        ],
        /* :: */[
          /* :: */[
            /* Player */[/* P2 */1],
            /* :: */[
              /* Empty */0,
              /* :: */[
                /* Player */[/* P2 */1],
                /* :: */[
                  /* Player */[/* P2 */1],
                  /* :: */[
                    /* Empty */0,
                    /* [] */0
                  ]
                ]
              ]
            ]
          ],
          /* :: */[
            /* :: */[
              /* Player */[/* P1 */0],
              /* :: */[
                /* Empty */0,
                /* :: */[
                  /* Player */[/* P1 */0],
                  /* :: */[
                    /* Player */[/* P1 */0],
                    /* :: */[
                      /* Empty */0,
                      /* [] */0
                    ]
                  ]
                ]
              ]
            ],
            /* [] */0
          ]
        ]
      ]
    ], "four by five board");

CS17SetupGame$Project3.checkExpect(transpose(/* :: */[
          /* :: */[
            /* Player */[/* P1 */0],
            /* :: */[
              /* Player */[/* P1 */0],
              /* :: */[
                /* Player */[/* P1 */0],
                /* [] */0
              ]
            ]
          ],
          /* :: */[
            /* :: */[
              /* Empty */0,
              /* :: */[
                /* Empty */0,
                /* :: */[
                  /* Empty */0,
                  /* [] */0
                ]
              ]
            ],
            /* :: */[
              /* :: */[
                /* Empty */0,
                /* :: */[
                  /* Empty */0,
                  /* :: */[
                    /* Empty */0,
                    /* [] */0
                  ]
                ]
              ],
              /* [] */0
            ]
          ]
        ]), /* :: */[
      /* :: */[
        /* Player */[/* P1 */0],
        /* :: */[
          /* Empty */0,
          /* :: */[
            /* Empty */0,
            /* [] */0
          ]
        ]
      ],
      /* :: */[
        /* :: */[
          /* Player */[/* P1 */0],
          /* :: */[
            /* Empty */0,
            /* :: */[
              /* Empty */0,
              /* [] */0
            ]
          ]
        ],
        /* :: */[
          /* :: */[
            /* Player */[/* P1 */0],
            /* :: */[
              /* Empty */0,
              /* :: */[
                /* Empty */0,
                /* [] */0
              ]
            ]
          ],
          /* [] */0
        ]
      ]
    ], "incomplete board");

CS17SetupGame$Project3.checkExpect("[ ]", "[ ]", "stringOfSlot empty");

CS17SetupGame$Project3.checkExpect(stringOfSlot(/* Player */[/* P1 */0]), "[O]", "stringOfSlot P1");

CS17SetupGame$Project3.checkExpect(stringOfSlot(/* Player */[/* P2 */1]), "[X]", "stringOfSlot P2");

CS17SetupGame$Project3.checkExpect(stringOfList(/* :: */[
          /* Empty */0,
          /* :: */[
            /* Empty */0,
            /* :: */[
              /* Empty */0,
              /* :: */[
                /* Player */[/* P1 */0],
                /* [] */0
              ]
            ]
          ]
        ]), "[[ ] [ ] [ ] [O]]", "stringOfList one");

CS17SetupGame$Project3.checkExpect(stringOfList(/* :: */[
          /* Empty */0,
          /* :: */[
            /* Player */[/* P1 */0],
            /* :: */[
              /* Player */[/* P2 */1],
              /* :: */[
                /* Player */[/* P1 */0],
                /* [] */0
              ]
            ]
          ]
        ]), "[[ ] [O] [X] [O]]", "stringOfList both");

CS17SetupGame$Project3.checkError((function (param) {
        return Pervasives.failwith("empty column does not exist");
      }), "empty column does not exist");

CS17SetupGame$Project3.checkExpect(stringOfBoard(/* :: */[
          /* :: */[
            /* Empty */0,
            /* :: */[
              /* Empty */0,
              /* [] */0
            ]
          ],
          /* :: */[
            /* :: */[
              /* Empty */0,
              /* :: */[
                /* Empty */0,
                /* [] */0
              ]
            ],
            /* :: */[
              /* :: */[
                /* Empty */0,
                /* :: */[
                  /* Empty */0,
                  /* [] */0
                ]
              ],
              /* [] */0
            ]
          ]
        ]), "[[ ] [ ] [ ]]\n[[ ] [ ] [ ]]", "mini board");

CS17SetupGame$Project3.checkExpect(stringOfBoard(/* :: */[
          /* :: */[
            /* Empty */0,
            /* :: */[
              /* Empty */0,
              /* :: */[
                /* Empty */0,
                /* :: */[
                  /* Empty */0,
                  /* [] */0
                ]
              ]
            ]
          ],
          /* :: */[
            /* :: */[
              /* Empty */0,
              /* :: */[
                /* Empty */0,
                /* :: */[
                  /* Empty */0,
                  /* :: */[
                    /* Empty */0,
                    /* [] */0
                  ]
                ]
              ]
            ],
            /* :: */[
              /* :: */[
                /* Empty */0,
                /* :: */[
                  /* Empty */0,
                  /* :: */[
                    /* Empty */0,
                    /* :: */[
                      /* Empty */0,
                      /* [] */0
                    ]
                  ]
                ]
              ],
              /* :: */[
                /* :: */[
                  /* Player */[/* P2 */1],
                  /* :: */[
                    /* Player */[/* P2 */1],
                    /* :: */[
                      /* Player */[/* P1 */0],
                      /* :: */[
                        /* Player */[/* P1 */0],
                        /* [] */0
                      ]
                    ]
                  ]
                ],
                /* [] */0
              ]
            ]
          ]
        ]), "[[ ] [ ] [ ] [X]]\n[[ ] [ ] [ ] [X]]\n[[ ] [ ] [ ] [O]]\n[[ ] [ ] [ ] [O]]", "full board");

CS17SetupGame$Project3.checkError((function (param) {
        return stringOfBoard(/* [] */0);
      }), "Board cannot be 0-dimensional.");

CS17SetupGame$Project3.checkExpect(stringOfState(/* State */[
          /* Ongoing */Block.__(1, [/* P1 */0]),
          /* :: */[
            /* :: */[
              /* Empty */0,
              /* :: */[
                /* Empty */0,
                /* :: */[
                  /* Empty */0,
                  /* :: */[
                    /* Empty */0,
                    /* [] */0
                  ]
                ]
              ]
            ],
            /* :: */[
              /* :: */[
                /* Empty */0,
                /* :: */[
                  /* Empty */0,
                  /* :: */[
                    /* Empty */0,
                    /* :: */[
                      /* Empty */0,
                      /* [] */0
                    ]
                  ]
                ]
              ],
              /* :: */[
                /* :: */[
                  /* Empty */0,
                  /* :: */[
                    /* Empty */0,
                    /* :: */[
                      /* Empty */0,
                      /* :: */[
                        /* Empty */0,
                        /* [] */0
                      ]
                    ]
                  ]
                ],
                /* :: */[
                  /* :: */[
                    /* Player */[/* P2 */1],
                    /* :: */[
                      /* Player */[/* P2 */1],
                      /* :: */[
                        /* Player */[/* P1 */0],
                        /* :: */[
                          /* Player */[/* P1 */0],
                          /* [] */0
                        ]
                      ]
                    ]
                  ],
                  /* [] */0
                ]
              ]
            ]
          ]
        ]), "[[ ] [ ] [ ] [X]]\n[[ ] [ ] [ ] [X]]\n[[ ] [ ] [ ] [O]]\n[[ ] [ ] [ ] [O]]", "full board");

CS17SetupGame$Project3.checkExpect(create(/* Empty */0, 4), /* :: */[
      /* Empty */0,
      /* :: */[
        /* Empty */0,
        /* :: */[
          /* Empty */0,
          /* :: */[
            /* Empty */0,
            /* [] */0
          ]
        ]
      ]
    ], "create list");

CS17SetupGame$Project3.checkExpect(createBoard(2, 2), /* :: */[
      /* :: */[
        /* Empty */0,
        /* :: */[
          /* Empty */0,
          /* [] */0
        ]
      ],
      /* :: */[
        /* :: */[
          /* Empty */0,
          /* :: */[
            /* Empty */0,
            /* [] */0
          ]
        ],
        /* [] */0
      ]
    ], "create mini board");

CS17SetupGame$Project3.checkExpect(legalMoves(/* State */[
          /* Ongoing */Block.__(1, [/* P1 */0]),
          /* :: */[
            /* :: */[
              /* Empty */0,
              /* :: */[
                /* Empty */0,
                /* :: */[
                  /* Empty */0,
                  /* :: */[
                    /* Empty */0,
                    /* [] */0
                  ]
                ]
              ]
            ],
            /* :: */[
              /* :: */[
                /* Empty */0,
                /* :: */[
                  /* Empty */0,
                  /* :: */[
                    /* Empty */0,
                    /* :: */[
                      /* Empty */0,
                      /* [] */0
                    ]
                  ]
                ]
              ],
              /* :: */[
                /* :: */[
                  /* Empty */0,
                  /* :: */[
                    /* Empty */0,
                    /* :: */[
                      /* Empty */0,
                      /* :: */[
                        /* Empty */0,
                        /* [] */0
                      ]
                    ]
                  ]
                ],
                /* :: */[
                  /* :: */[
                    /* Player */[/* P2 */1],
                    /* :: */[
                      /* Player */[/* P2 */1],
                      /* :: */[
                        /* Player */[/* P1 */0],
                        /* :: */[
                          /* Player */[/* P1 */0],
                          /* [] */0
                        ]
                      ]
                    ]
                  ],
                  /* [] */0
                ]
              ]
            ]
          ]
        ]), /* :: */[
      /* Move */[1],
      /* :: */[
        /* Move */[2],
        /* :: */[
          /* Move */[3],
          /* [] */0
        ]
      ]
    ], "check legal moves");

CS17SetupGame$Project3.checkExpect(/* Win */Block.__(0, [/* P1 */0]), /* Win */Block.__(0, [/* P1 */0]), "game status p1 wins");

CS17SetupGame$Project3.checkExpect(drop(2, /* :: */[
          /* :: */[
            /* Empty */0,
            /* :: */[
              /* Empty */0,
              /* [] */0
            ]
          ],
          /* :: */[
            /* :: */[
              /* Empty */0,
              /* :: */[
                /* Empty */0,
                /* [] */0
              ]
            ],
            /* [] */0
          ]
        ], /* P1 */0), /* :: */[
      /* :: */[
        /* Empty */0,
        /* :: */[
          /* Empty */0,
          /* [] */0
        ]
      ],
      /* :: */[
        /* :: */[
          /* Empty */0,
          /* :: */[
            /* Player */[/* P1 */0],
            /* [] */0
          ]
        ],
        /* [] */0
      ]
    ], "drop in mini board");

CS17SetupGame$Project3.checkExpect(drop(1, /* :: */[
          /* :: */[
            /* Empty */0,
            /* :: */[
              /* Empty */0,
              /* :: */[
                /* Empty */0,
                /* :: */[
                  /* Empty */0,
                  /* [] */0
                ]
              ]
            ]
          ],
          /* :: */[
            /* :: */[
              /* Empty */0,
              /* :: */[
                /* Empty */0,
                /* :: */[
                  /* Empty */0,
                  /* :: */[
                    /* Empty */0,
                    /* [] */0
                  ]
                ]
              ]
            ],
            /* :: */[
              /* :: */[
                /* Empty */0,
                /* :: */[
                  /* Empty */0,
                  /* :: */[
                    /* Empty */0,
                    /* :: */[
                      /* Empty */0,
                      /* [] */0
                    ]
                  ]
                ]
              ],
              /* :: */[
                /* :: */[
                  /* Player */[/* P2 */1],
                  /* :: */[
                    /* Player */[/* P2 */1],
                    /* :: */[
                      /* Player */[/* P1 */0],
                      /* :: */[
                        /* Player */[/* P1 */0],
                        /* [] */0
                      ]
                    ]
                  ]
                ],
                /* [] */0
              ]
            ]
          ]
        ], /* P1 */0), /* :: */[
      /* :: */[
        /* Empty */0,
        /* :: */[
          /* Empty */0,
          /* :: */[
            /* Empty */0,
            /* :: */[
              /* Player */[/* P1 */0],
              /* [] */0
            ]
          ]
        ]
      ],
      /* :: */[
        /* :: */[
          /* Empty */0,
          /* :: */[
            /* Empty */0,
            /* :: */[
              /* Empty */0,
              /* :: */[
                /* Empty */0,
                /* [] */0
              ]
            ]
          ]
        ],
        /* :: */[
          /* :: */[
            /* Empty */0,
            /* :: */[
              /* Empty */0,
              /* :: */[
                /* Empty */0,
                /* :: */[
                  /* Empty */0,
                  /* [] */0
                ]
              ]
            ]
          ],
          /* :: */[
            /* :: */[
              /* Player */[/* P2 */1],
              /* :: */[
                /* Player */[/* P2 */1],
                /* :: */[
                  /* Player */[/* P1 */0],
                  /* :: */[
                    /* Player */[/* P1 */0],
                    /* [] */0
                  ]
                ]
              ]
            ],
            /* [] */0
          ]
        ]
      ]
    ], "drop in full board");

CS17SetupGame$Project3.checkError((function (param) {
        return drop(3, /* :: */[
                    /* :: */[
                      /* Empty */0,
                      /* [] */0
                    ],
                    /* :: */[
                      /* :: */[
                        /* Empty */0,
                        /* [] */0
                      ],
                      /* [] */0
                    ]
                  ], /* P1 */0);
      }), "input must be a list of lists with at least int columns");

CS17SetupGame$Project3.checkError((function (param) {
        return drop(2, /* [] */0, /* P2 */1);
      }), "input must be a list of lists with at least int columns");

CS17SetupGame$Project3.checkExpect(checkWinCol(/* :: */[
          /* :: */[
            /* Empty */0,
            /* :: */[
              /* Empty */0,
              /* :: */[
                /* Empty */0,
                /* :: */[
                  /* Empty */0,
                  /* [] */0
                ]
              ]
            ]
          ],
          /* :: */[
            /* :: */[
              /* Empty */0,
              /* :: */[
                /* Empty */0,
                /* :: */[
                  /* Empty */0,
                  /* :: */[
                    /* Empty */0,
                    /* [] */0
                  ]
                ]
              ]
            ],
            /* :: */[
              /* :: */[
                /* Empty */0,
                /* :: */[
                  /* Empty */0,
                  /* :: */[
                    /* Empty */0,
                    /* :: */[
                      /* Empty */0,
                      /* [] */0
                    ]
                  ]
                ]
              ],
              /* :: */[
                /* :: */[
                  /* Player */[/* P2 */1],
                  /* :: */[
                    /* Player */[/* P2 */1],
                    /* :: */[
                      /* Player */[/* P1 */0],
                      /* :: */[
                        /* Player */[/* P1 */0],
                        /* [] */0
                      ]
                    ]
                  ]
                ],
                /* [] */0
              ]
            ]
          ]
        ], /* P1 */0), /* Ongoing */Block.__(1, [/* P2 */1]), "checkWinCol Ongoing");

CS17SetupGame$Project3.checkExpect(checkWinCol(/* :: */[
          /* :: */[
            /* Empty */0,
            /* :: */[
              /* Empty */0,
              /* :: */[
                /* Empty */0,
                /* :: */[
                  /* Player */[/* P1 */0],
                  /* [] */0
                ]
              ]
            ]
          ],
          /* :: */[
            /* :: */[
              /* Empty */0,
              /* :: */[
                /* Empty */0,
                /* :: */[
                  /* Empty */0,
                  /* :: */[
                    /* Player */[/* P1 */0],
                    /* [] */0
                  ]
                ]
              ]
            ],
            /* :: */[
              /* :: */[
                /* Empty */0,
                /* :: */[
                  /* Empty */0,
                  /* :: */[
                    /* Empty */0,
                    /* :: */[
                      /* Player */[/* P1 */0],
                      /* [] */0
                    ]
                  ]
                ]
              ],
              /* :: */[
                /* :: */[
                  /* Player */[/* P2 */1],
                  /* :: */[
                    /* Player */[/* P2 */1],
                    /* :: */[
                      /* Player */[/* P1 */0],
                      /* :: */[
                        /* Player */[/* P1 */0],
                        /* [] */0
                      ]
                    ]
                  ]
                ],
                /* [] */0
              ]
            ]
          ]
        ], /* P1 */0), /* Ongoing */Block.__(1, [/* P2 */1]), "checkWinCol win is a row");

CS17SetupGame$Project3.checkExpect(checkWinCol(/* :: */[
          /* :: */[
            /* Empty */0,
            /* :: */[
              /* Empty */0,
              /* :: */[
                /* Empty */0,
                /* :: */[
                  /* Player */[/* P1 */0],
                  /* [] */0
                ]
              ]
            ]
          ],
          /* :: */[
            /* :: */[
              /* Empty */0,
              /* :: */[
                /* Empty */0,
                /* :: */[
                  /* Empty */0,
                  /* :: */[
                    /* Player */[/* P1 */0],
                    /* [] */0
                  ]
                ]
              ]
            ],
            /* :: */[
              /* :: */[
                /* Empty */0,
                /* :: */[
                  /* Empty */0,
                  /* :: */[
                    /* Empty */0,
                    /* :: */[
                      /* Player */[/* P2 */1],
                      /* [] */0
                    ]
                  ]
                ]
              ],
              /* :: */[
                /* :: */[
                  /* Player */[/* P1 */0],
                  /* :: */[
                    /* Player */[/* P1 */0],
                    /* :: */[
                      /* Player */[/* P1 */0],
                      /* :: */[
                        /* Player */[/* P1 */0],
                        /* [] */0
                      ]
                    ]
                  ]
                ],
                /* [] */0
              ]
            ]
          ]
        ], /* P1 */0), /* Win */Block.__(0, [/* P1 */0]), "checkWinCol P1 wins");

CS17SetupGame$Project3.checkExpect(checkWinCol(/* :: */[
          /* :: */[
            /* Empty */0,
            /* :: */[
              /* Empty */0,
              /* :: */[
                /* Empty */0,
                /* :: */[
                  /* Player */[/* P1 */0],
                  /* [] */0
                ]
              ]
            ]
          ],
          /* :: */[
            /* :: */[
              /* Empty */0,
              /* :: */[
                /* Empty */0,
                /* :: */[
                  /* Empty */0,
                  /* :: */[
                    /* Player */[/* P1 */0],
                    /* [] */0
                  ]
                ]
              ]
            ],
            /* :: */[
              /* :: */[
                /* Empty */0,
                /* :: */[
                  /* Empty */0,
                  /* :: */[
                    /* Empty */0,
                    /* :: */[
                      /* Player */[/* P2 */1],
                      /* [] */0
                    ]
                  ]
                ]
              ],
              /* :: */[
                /* :: */[
                  /* Player */[/* P2 */1],
                  /* :: */[
                    /* Player */[/* P2 */1],
                    /* :: */[
                      /* Player */[/* P2 */1],
                      /* :: */[
                        /* Player */[/* P2 */1],
                        /* [] */0
                      ]
                    ]
                  ]
                ],
                /* [] */0
              ]
            ]
          ]
        ], /* P2 */1), /* Win */Block.__(0, [/* P2 */1]), "checkWinCol P2 wins");

CS17SetupGame$Project3.checkExpect(checkWinCol(transpose(/* :: */[
              /* :: */[
                /* Player */[/* P1 */0],
                /* :: */[
                  /* Player */[/* P1 */0],
                  /* :: */[
                    /* Player */[/* P2 */1],
                    /* :: */[
                      /* Player */[/* P1 */0],
                      /* [] */0
                    ]
                  ]
                ]
              ],
              /* :: */[
                /* :: */[
                  /* Empty */0,
                  /* :: */[
                    /* Empty */0,
                    /* :: */[
                      /* Empty */0,
                      /* :: */[
                        /* Player */[/* P1 */0],
                        /* [] */0
                      ]
                    ]
                  ]
                ],
                /* :: */[
                  /* :: */[
                    /* Empty */0,
                    /* :: */[
                      /* Player */[/* P1 */0],
                      /* :: */[
                        /* Player */[/* P2 */1],
                        /* :: */[
                          /* Player */[/* P1 */0],
                          /* [] */0
                        ]
                      ]
                    ]
                  ],
                  /* :: */[
                    /* :: */[
                      /* Empty */0,
                      /* :: */[
                        /* Empty */0,
                        /* :: */[
                          /* Player */[/* P2 */1],
                          /* :: */[
                            /* Player */[/* P1 */0],
                            /* [] */0
                          ]
                        ]
                      ]
                    ],
                    /* [] */0
                  ]
                ]
              ]
            ]), /* P1 */0), /* Win */Block.__(0, [/* P1 */0]), "checks a row win");

CS17SetupGame$Project3.checkExpect(checkWinCol(transpose(/* :: */[
              /* :: */[
                /* Player */[/* P1 */0],
                /* :: */[
                  /* Player */[/* P1 */0],
                  /* :: */[
                    /* Player */[/* P2 */1],
                    /* :: */[
                      /* Player */[/* P2 */1],
                      /* [] */0
                    ]
                  ]
                ]
              ],
              /* :: */[
                /* :: */[
                  /* Empty */0,
                  /* :: */[
                    /* Empty */0,
                    /* :: */[
                      /* Empty */0,
                      /* :: */[
                        /* Player */[/* P1 */0],
                        /* [] */0
                      ]
                    ]
                  ]
                ],
                /* :: */[
                  /* :: */[
                    /* Empty */0,
                    /* :: */[
                      /* Player */[/* P1 */0],
                      /* :: */[
                        /* Player */[/* P2 */1],
                        /* :: */[
                          /* Player */[/* P1 */0],
                          /* [] */0
                        ]
                      ]
                    ]
                  ],
                  /* :: */[
                    /* :: */[
                      /* Empty */0,
                      /* :: */[
                        /* Empty */0,
                        /* :: */[
                          /* Player */[/* P2 */1],
                          /* :: */[
                            /* Player */[/* P1 */0],
                            /* [] */0
                          ]
                        ]
                      ]
                    ],
                    /* [] */0
                  ]
                ]
              ]
            ]), /* P1 */0), /* Ongoing */Block.__(1, [/* P2 */1]), "checks a row ongoing");

CS17SetupGame$Project3.checkExpect(checkDiaDown(/* :: */[
          /* :: */[
            /* Player */[/* P1 */0],
            /* :: */[
              /* Player */[/* P2 */1],
              /* :: */[
                /* Player */[/* P2 */1],
                /* :: */[
                  /* Player */[/* P1 */0],
                  /* [] */0
                ]
              ]
            ]
          ],
          /* :: */[
            /* :: */[
              /* Empty */0,
              /* :: */[
                /* Player */[/* P2 */1],
                /* :: */[
                  /* Player */[/* P1 */0],
                  /* :: */[
                    /* Player */[/* P1 */0],
                    /* [] */0
                  ]
                ]
              ]
            ],
            /* :: */[
              /* :: */[
                /* Empty */0,
                /* :: */[
                  /* Player */[/* P1 */0],
                  /* :: */[
                    /* Player */[/* P2 */1],
                    /* :: */[
                      /* Player */[/* P1 */0],
                      /* [] */0
                    ]
                  ]
                ]
              ],
              /* :: */[
                /* :: */[
                  /* Player */[/* P1 */0],
                  /* :: */[
                    /* Player */[/* P1 */0],
                    /* :: */[
                      /* Player */[/* P2 */1],
                      /* :: */[
                        /* Player */[/* P2 */1],
                        /* [] */0
                      ]
                    ]
                  ]
                ],
                /* [] */0
              ]
            ]
          ]
        ], /* P1 */0), /* Win */Block.__(0, [/* P1 */0]), "check down diagonals");

CS17SetupGame$Project3.checkExpect(checkDiaUp(/* :: */[
          /* :: */[
            /* Player */[/* P2 */1],
            /* :: */[
              /* Player */[/* P2 */1],
              /* :: */[
                /* Player */[/* P2 */1],
                /* :: */[
                  /* Player */[/* P1 */0],
                  /* [] */0
                ]
              ]
            ]
          ],
          /* :: */[
            /* :: */[
              /* Empty */0,
              /* :: */[
                /* Player */[/* P2 */1],
                /* :: */[
                  /* Player */[/* P1 */0],
                  /* :: */[
                    /* Player */[/* P1 */0],
                    /* [] */0
                  ]
                ]
              ]
            ],
            /* :: */[
              /* :: */[
                /* Empty */0,
                /* :: */[
                  /* Player */[/* P1 */0],
                  /* :: */[
                    /* Player */[/* P2 */1],
                    /* :: */[
                      /* Player */[/* P1 */0],
                      /* [] */0
                    ]
                  ]
                ]
              ],
              /* :: */[
                /* :: */[
                  /* Empty */0,
                  /* :: */[
                    /* Empty */0,
                    /* :: */[
                      /* Player */[/* P2 */1],
                      /* :: */[
                        /* Player */[/* P2 */1],
                        /* [] */0
                      ]
                    ]
                  ]
                ],
                /* [] */0
              ]
            ]
          ]
        ], /* P2 */1), /* Win */Block.__(0, [/* P2 */1]), "check up diagonals");

CS17SetupGame$Project3.checkError((function (param) {
        return checkDiaUp(/* :: */[
                    /* :: */[
                      /* Empty */0,
                      /* [] */0
                    ],
                    /* :: */[
                      /* :: */[
                        /* Empty */0,
                        /* [] */0
                      ],
                      /* [] */0
                    ]
                  ], /* P2 */1);
      }), "input must be a list(list(slot)) with at least four lists");

CS17SetupGame$Project3.checkExpect(checkDiaDown(/* :: */[
          /* :: */[
            /* Player */[/* P1 */0],
            /* :: */[
              /* Player */[/* P2 */1],
              /* :: */[
                /* Player */[/* P2 */1],
                /* :: */[
                  /* Player */[/* P1 */0],
                  /* [] */0
                ]
              ]
            ]
          ],
          /* :: */[
            /* :: */[
              /* Empty */0,
              /* :: */[
                /* Player */[/* P2 */1],
                /* :: */[
                  /* Player */[/* P1 */0],
                  /* :: */[
                    /* Player */[/* P1 */0],
                    /* [] */0
                  ]
                ]
              ]
            ],
            /* :: */[
              /* :: */[
                /* Empty */0,
                /* :: */[
                  /* Player */[/* P2 */1],
                  /* :: */[
                    /* Player */[/* P2 */1],
                    /* :: */[
                      /* Player */[/* P1 */0],
                      /* [] */0
                    ]
                  ]
                ]
              ],
              /* :: */[
                /* :: */[
                  /* Player */[/* P1 */0],
                  /* :: */[
                    /* Player */[/* P1 */0],
                    /* :: */[
                      /* Player */[/* P2 */1],
                      /* :: */[
                        /* Player */[/* P2 */1],
                        /* [] */0
                      ]
                    ]
                  ]
                ],
                /* [] */0
              ]
            ]
          ]
        ], /* P1 */0), /* Ongoing */Block.__(1, [/* P2 */1]), "check down diagonals ongoing");

CS17SetupGame$Project3.checkError((function (param) {
        var partial_arg = /* :: */[
          /* :: */[
            /* Empty */0,
            /* :: */[
              /* Empty */0,
              /* :: */[
                /* Player */[/* P1 */0],
                /* :: */[
                  /* Player */[/* P2 */1],
                  /* [] */0
                ]
              ]
            ]
          ],
          /* :: */[
            /* :: */[
              /* Player */[/* P2 */1],
              /* :: */[
                /* Player */[/* P1 */0],
                /* :: */[
                  /* Player */[/* P2 */1],
                  /* :: */[
                    /* Player */[/* P1 */0],
                    /* [] */0
                  ]
                ]
              ]
            ],
            /* [] */0
          ]
        ];
        return (function (param) {
            return checkDiaDown(partial_arg, param);
          });
      }), "input must be a list(list(slot)) with at least four lists");

CS17SetupGame$Project3.checkExpect(checkDiaUp(/* :: */[
          /* :: */[
            /* Player */[/* P1 */0],
            /* :: */[
              /* Player */[/* P2 */1],
              /* :: */[
                /* Player */[/* P2 */1],
                /* :: */[
                  /* Player */[/* P1 */0],
                  /* [] */0
                ]
              ]
            ]
          ],
          /* :: */[
            /* :: */[
              /* Empty */0,
              /* :: */[
                /* Player */[/* P2 */1],
                /* :: */[
                  /* Player */[/* P1 */0],
                  /* :: */[
                    /* Player */[/* P1 */0],
                    /* [] */0
                  ]
                ]
              ]
            ],
            /* :: */[
              /* :: */[
                /* Empty */0,
                /* :: */[
                  /* Player */[/* P1 */0],
                  /* :: */[
                    /* Player */[/* P2 */1],
                    /* :: */[
                      /* Player */[/* P1 */0],
                      /* [] */0
                    ]
                  ]
                ]
              ],
              /* :: */[
                /* :: */[
                  /* Empty */0,
                  /* :: */[
                    /* Empty */0,
                    /* :: */[
                      /* Player */[/* P2 */1],
                      /* :: */[
                        /* Player */[/* P2 */1],
                        /* [] */0
                      ]
                    ]
                  ]
                ],
                /* [] */0
              ]
            ]
          ]
        ], /* P2 */1), /* Ongoing */Block.__(1, [/* P1 */0]), "check up diagonals ongoing");

CS17SetupGame$Project3.checkError((function (param) {
        return checkDiaUp(/* :: */[
                    /* :: */[
                      /* Empty */0,
                      /* [] */0
                    ],
                    /* :: */[
                      /* :: */[
                        /* Empty */0,
                        /* [] */0
                      ],
                      /* [] */0
                    ]
                  ], /* P2 */1);
      }), "input must be a list(list(slot)) with at least four lists");

CS17SetupGame$Project3.checkExpect(convertBoardlist(/* :: */[
          /* :: */[
            /* Player */[/* P2 */1],
            /* :: */[
              /* Player */[/* P2 */1],
              /* :: */[
                /* Player */[/* P2 */1],
                /* :: */[
                  /* Player */[/* P1 */0],
                  /* [] */0
                ]
              ]
            ]
          ],
          /* :: */[
            /* :: */[
              /* Empty */0,
              /* :: */[
                /* Empty */0,
                /* :: */[
                  /* Empty */0,
                  /* :: */[
                    /* Player */[/* P1 */0],
                    /* [] */0
                  ]
                ]
              ]
            ],
            /* :: */[
              /* :: */[
                /* Empty */0,
                /* :: */[
                  /* Player */[/* P1 */0],
                  /* :: */[
                    /* Player */[/* P1 */0],
                    /* :: */[
                      /* Player */[/* P1 */0],
                      /* [] */0
                    ]
                  ]
                ]
              ],
              /* :: */[
                /* :: */[
                  /* Empty */0,
                  /* :: */[
                    /* Player */[/* P2 */1],
                    /* :: */[
                      /* Player */[/* P2 */1],
                      /* :: */[
                        /* Player */[/* P2 */1],
                        /* [] */0
                      ]
                    ]
                  ]
                ],
                /* [] */0
              ]
            ]
          ]
        ]), /* :: */[
      /* :: */[
        /* Player */[/* P2 */1],
        /* :: */[
          /* Player */[/* P2 */1],
          /* :: */[
            /* Player */[/* P2 */1],
            /* :: */[
              /* Player */[/* P1 */0],
              /* [] */0
            ]
          ]
        ]
      ],
      /* :: */[
        /* :: */[
          /* Empty */0,
          /* :: */[
            /* Empty */0,
            /* :: */[
              /* Empty */0,
              /* :: */[
                /* Player */[/* P1 */0],
                /* [] */0
              ]
            ]
          ]
        ],
        /* :: */[
          /* :: */[
            /* Empty */0,
            /* :: */[
              /* Player */[/* P1 */0],
              /* :: */[
                /* Player */[/* P1 */0],
                /* :: */[
                  /* Player */[/* P1 */0],
                  /* [] */0
                ]
              ]
            ]
          ],
          /* :: */[
            /* :: */[
              /* Empty */0,
              /* :: */[
                /* Player */[/* P2 */1],
                /* :: */[
                  /* Player */[/* P2 */1],
                  /* :: */[
                    /* Player */[/* P2 */1],
                    /* [] */0
                  ]
                ]
              ]
            ],
            /* :: */[
              /* :: */[
                /* Player */[/* P2 */1],
                /* :: */[
                  /* Empty */0,
                  /* :: */[
                    /* Empty */0,
                    /* :: */[
                      /* Empty */0,
                      /* [] */0
                    ]
                  ]
                ]
              ],
              /* :: */[
                /* :: */[
                  /* Player */[/* P2 */1],
                  /* :: */[
                    /* Empty */0,
                    /* :: */[
                      /* Player */[/* P1 */0],
                      /* :: */[
                        /* Player */[/* P2 */1],
                        /* [] */0
                      ]
                    ]
                  ]
                ],
                /* :: */[
                  /* :: */[
                    /* Player */[/* P2 */1],
                    /* :: */[
                      /* Empty */0,
                      /* :: */[
                        /* Player */[/* P1 */0],
                        /* :: */[
                          /* Player */[/* P2 */1],
                          /* [] */0
                        ]
                      ]
                    ]
                  ],
                  /* :: */[
                    /* :: */[
                      /* Player */[/* P1 */0],
                      /* :: */[
                        /* Player */[/* P1 */0],
                        /* :: */[
                          /* Player */[/* P1 */0],
                          /* :: */[
                            /* Player */[/* P2 */1],
                            /* [] */0
                          ]
                        ]
                      ]
                    ],
                    /* :: */[
                      /* :: */[
                        /* Player */[/* P2 */1],
                        /* [] */0
                      ],
                      /* :: */[
                        /* :: */[
                          /* Player */[/* P2 */1],
                          /* :: */[
                            /* Empty */0,
                            /* [] */0
                          ]
                        ],
                        /* :: */[
                          /* :: */[
                            /* Player */[/* P2 */1],
                            /* :: */[
                              /* Empty */0,
                              /* :: */[
                                /* Empty */0,
                                /* [] */0
                              ]
                            ]
                          ],
                          /* :: */[
                            /* :: */[
                              /* Player */[/* P1 */0],
                              /* :: */[
                                /* Empty */0,
                                /* :: */[
                                  /* Player */[/* P1 */0],
                                  /* :: */[
                                    /* Empty */0,
                                    /* [] */0
                                  ]
                                ]
                              ]
                            ],
                            /* :: */[
                              /* :: */[
                                /* Player */[/* P1 */0],
                                /* :: */[
                                  /* Player */[/* P1 */0],
                                  /* :: */[
                                    /* Player */[/* P2 */1],
                                    /* [] */0
                                  ]
                                ]
                              ],
                              /* :: */[
                                /* :: */[
                                  /* Player */[/* P1 */0],
                                  /* :: */[
                                    /* Player */[/* P2 */1],
                                    /* [] */0
                                  ]
                                ],
                                /* :: */[
                                  /* :: */[
                                    /* Player */[/* P2 */1],
                                    /* [] */0
                                  ],
                                  /* :: */[
                                    /* :: */[
                                      /* Player */[/* P1 */0],
                                      /* [] */0
                                    ],
                                    /* :: */[
                                      /* :: */[
                                        /* Player */[/* P1 */0],
                                        /* :: */[
                                          /* Player */[/* P2 */1],
                                          /* [] */0
                                        ]
                                      ],
                                      /* :: */[
                                        /* :: */[
                                          /* Player */[/* P1 */0],
                                          /* :: */[
                                            /* Empty */0,
                                            /* :: */[
                                              /* Player */[/* P2 */1],
                                              /* [] */0
                                            ]
                                          ]
                                        ],
                                        /* :: */[
                                          /* :: */[
                                            /* Player */[/* P2 */1],
                                            /* :: */[
                                              /* Player */[/* P1 */0],
                                              /* :: */[
                                                /* Empty */0,
                                                /* :: */[
                                                  /* Player */[/* P2 */1],
                                                  /* [] */0
                                                ]
                                              ]
                                            ]
                                          ],
                                          /* :: */[
                                            /* :: */[
                                              /* Player */[/* P2 */1],
                                              /* :: */[
                                                /* Player */[/* P1 */0],
                                                /* :: */[
                                                  /* Empty */0,
                                                  /* [] */0
                                                ]
                                              ]
                                            ],
                                            /* :: */[
                                              /* :: */[
                                                /* Player */[/* P2 */1],
                                                /* :: */[
                                                  /* Empty */0,
                                                  /* [] */0
                                                ]
                                              ],
                                              /* :: */[
                                                /* :: */[
                                                  /* Empty */0,
                                                  /* [] */0
                                                ],
                                                /* [] */0
                                              ]
                                            ]
                                          ]
                                        ]
                                      ]
                                    ]
                                  ]
                                ]
                              ]
                            ]
                          ]
                        ]
                      ]
                    ]
                  ]
                ]
              ]
            ]
          ]
        ]
      ]
    ], "converts board to all combinations");

CS17SetupGame$Project3.checkExpect(nextState(/* State */[
          /* Ongoing */Block.__(1, [/* P1 */0]),
          /* :: */[
            /* :: */[
              /* Player */[/* P2 */1],
              /* :: */[
                /* Player */[/* P2 */1],
                /* :: */[
                  /* Player */[/* P2 */1],
                  /* :: */[
                    /* Player */[/* P1 */0],
                    /* [] */0
                  ]
                ]
              ]
            ],
            /* :: */[
              /* :: */[
                /* Empty */0,
                /* :: */[
                  /* Empty */0,
                  /* :: */[
                    /* Empty */0,
                    /* :: */[
                      /* Player */[/* P1 */0],
                      /* [] */0
                    ]
                  ]
                ]
              ],
              /* :: */[
                /* :: */[
                  /* Empty */0,
                  /* :: */[
                    /* Player */[/* P1 */0],
                    /* :: */[
                      /* Player */[/* P1 */0],
                      /* :: */[
                        /* Player */[/* P1 */0],
                        /* [] */0
                      ]
                    ]
                  ]
                ],
                /* :: */[
                  /* :: */[
                    /* Empty */0,
                    /* :: */[
                      /* Empty */0,
                      /* :: */[
                        /* Player */[/* P2 */1],
                        /* :: */[
                          /* Player */[/* P2 */1],
                          /* [] */0
                        ]
                      ]
                    ]
                  ],
                  /* [] */0
                ]
              ]
            ]
          ]
        ], /* Move */[4]), /* State */[
      /* Ongoing */Block.__(1, [/* P2 */1]),
      /* :: */[
        /* :: */[
          /* Player */[/* P2 */1],
          /* :: */[
            /* Player */[/* P2 */1],
            /* :: */[
              /* Player */[/* P2 */1],
              /* :: */[
                /* Player */[/* P1 */0],
                /* [] */0
              ]
            ]
          ]
        ],
        /* :: */[
          /* :: */[
            /* Empty */0,
            /* :: */[
              /* Empty */0,
              /* :: */[
                /* Empty */0,
                /* :: */[
                  /* Player */[/* P1 */0],
                  /* [] */0
                ]
              ]
            ]
          ],
          /* :: */[
            /* :: */[
              /* Empty */0,
              /* :: */[
                /* Player */[/* P1 */0],
                /* :: */[
                  /* Player */[/* P1 */0],
                  /* :: */[
                    /* Player */[/* P1 */0],
                    /* [] */0
                  ]
                ]
              ]
            ],
            /* :: */[
              /* :: */[
                /* Empty */0,
                /* :: */[
                  /* Player */[/* P1 */0],
                  /* :: */[
                    /* Player */[/* P2 */1],
                    /* :: */[
                      /* Player */[/* P2 */1],
                      /* [] */0
                    ]
                  ]
                ]
              ],
              /* [] */0
            ]
          ]
        ]
      ]
    ], "nextState Ongoing(P2)");

CS17SetupGame$Project3.checkExpect(nextState(/* State */[
          /* Ongoing */Block.__(1, [/* P2 */1]),
          /* :: */[
            /* :: */[
              /* Player */[/* P2 */1],
              /* :: */[
                /* Player */[/* P2 */1],
                /* :: */[
                  /* Player */[/* P2 */1],
                  /* :: */[
                    /* Player */[/* P1 */0],
                    /* [] */0
                  ]
                ]
              ]
            ],
            /* :: */[
              /* :: */[
                /* Empty */0,
                /* :: */[
                  /* Empty */0,
                  /* :: */[
                    /* Empty */0,
                    /* :: */[
                      /* Player */[/* P1 */0],
                      /* [] */0
                    ]
                  ]
                ]
              ],
              /* :: */[
                /* :: */[
                  /* Empty */0,
                  /* :: */[
                    /* Player */[/* P1 */0],
                    /* :: */[
                      /* Player */[/* P1 */0],
                      /* :: */[
                        /* Player */[/* P1 */0],
                        /* [] */0
                      ]
                    ]
                  ]
                ],
                /* :: */[
                  /* :: */[
                    /* Empty */0,
                    /* :: */[
                      /* Empty */0,
                      /* :: */[
                        /* Player */[/* P2 */1],
                        /* :: */[
                          /* Player */[/* P2 */1],
                          /* [] */0
                        ]
                      ]
                    ]
                  ],
                  /* [] */0
                ]
              ]
            ]
          ]
        ], /* Move */[4]), /* State */[
      /* Ongoing */Block.__(1, [/* P1 */0]),
      /* :: */[
        /* :: */[
          /* Player */[/* P2 */1],
          /* :: */[
            /* Player */[/* P2 */1],
            /* :: */[
              /* Player */[/* P2 */1],
              /* :: */[
                /* Player */[/* P1 */0],
                /* [] */0
              ]
            ]
          ]
        ],
        /* :: */[
          /* :: */[
            /* Empty */0,
            /* :: */[
              /* Empty */0,
              /* :: */[
                /* Empty */0,
                /* :: */[
                  /* Player */[/* P1 */0],
                  /* [] */0
                ]
              ]
            ]
          ],
          /* :: */[
            /* :: */[
              /* Empty */0,
              /* :: */[
                /* Player */[/* P1 */0],
                /* :: */[
                  /* Player */[/* P1 */0],
                  /* :: */[
                    /* Player */[/* P1 */0],
                    /* [] */0
                  ]
                ]
              ]
            ],
            /* :: */[
              /* :: */[
                /* Empty */0,
                /* :: */[
                  /* Player */[/* P2 */1],
                  /* :: */[
                    /* Player */[/* P2 */1],
                    /* :: */[
                      /* Player */[/* P2 */1],
                      /* [] */0
                    ]
                  ]
                ]
              ],
              /* [] */0
            ]
          ]
        ]
      ]
    ], "nextState Ongoing(P1)");

CS17SetupGame$Project3.checkExpect(nextState(/* State */[
          /* Ongoing */Block.__(1, [/* P1 */0]),
          /* :: */[
            /* :: */[
              /* Player */[/* P2 */1],
              /* :: */[
                /* Player */[/* P2 */1],
                /* :: */[
                  /* Player */[/* P2 */1],
                  /* :: */[
                    /* Player */[/* P1 */0],
                    /* [] */0
                  ]
                ]
              ]
            ],
            /* :: */[
              /* :: */[
                /* Empty */0,
                /* :: */[
                  /* Empty */0,
                  /* :: */[
                    /* Empty */0,
                    /* :: */[
                      /* Player */[/* P1 */0],
                      /* [] */0
                    ]
                  ]
                ]
              ],
              /* :: */[
                /* :: */[
                  /* Empty */0,
                  /* :: */[
                    /* Player */[/* P1 */0],
                    /* :: */[
                      /* Player */[/* P1 */0],
                      /* :: */[
                        /* Player */[/* P1 */0],
                        /* [] */0
                      ]
                    ]
                  ]
                ],
                /* :: */[
                  /* :: */[
                    /* Empty */0,
                    /* :: */[
                      /* Empty */0,
                      /* :: */[
                        /* Player */[/* P2 */1],
                        /* :: */[
                          /* Player */[/* P2 */1],
                          /* [] */0
                        ]
                      ]
                    ]
                  ],
                  /* [] */0
                ]
              ]
            ]
          ]
        ], /* Move */[3]), /* State */[
      /* Win */Block.__(0, [/* P1 */0]),
      /* :: */[
        /* :: */[
          /* Player */[/* P2 */1],
          /* :: */[
            /* Player */[/* P2 */1],
            /* :: */[
              /* Player */[/* P2 */1],
              /* :: */[
                /* Player */[/* P1 */0],
                /* [] */0
              ]
            ]
          ]
        ],
        /* :: */[
          /* :: */[
            /* Empty */0,
            /* :: */[
              /* Empty */0,
              /* :: */[
                /* Empty */0,
                /* :: */[
                  /* Player */[/* P1 */0],
                  /* [] */0
                ]
              ]
            ]
          ],
          /* :: */[
            /* :: */[
              /* Player */[/* P1 */0],
              /* :: */[
                /* Player */[/* P1 */0],
                /* :: */[
                  /* Player */[/* P1 */0],
                  /* :: */[
                    /* Player */[/* P1 */0],
                    /* [] */0
                  ]
                ]
              ]
            ],
            /* :: */[
              /* :: */[
                /* Empty */0,
                /* :: */[
                  /* Empty */0,
                  /* :: */[
                    /* Player */[/* P2 */1],
                    /* :: */[
                      /* Player */[/* P2 */1],
                      /* [] */0
                    ]
                  ]
                ]
              ],
              /* [] */0
            ]
          ]
        ]
      ]
    ], "nextState Win(P1)");

CS17SetupGame$Project3.checkExpect(nextState(/* State */[
          /* Ongoing */Block.__(1, [/* P2 */1]),
          /* :: */[
            /* :: */[
              /* Player */[/* P2 */1],
              /* :: */[
                /* Player */[/* P2 */1],
                /* :: */[
                  /* Player */[/* P2 */1],
                  /* :: */[
                    /* Player */[/* P1 */0],
                    /* [] */0
                  ]
                ]
              ]
            ],
            /* :: */[
              /* :: */[
                /* Empty */0,
                /* :: */[
                  /* Empty */0,
                  /* :: */[
                    /* Empty */0,
                    /* :: */[
                      /* Player */[/* P1 */0],
                      /* [] */0
                    ]
                  ]
                ]
              ],
              /* :: */[
                /* :: */[
                  /* Empty */0,
                  /* :: */[
                    /* Player */[/* P1 */0],
                    /* :: */[
                      /* Player */[/* P1 */0],
                      /* :: */[
                        /* Player */[/* P1 */0],
                        /* [] */0
                      ]
                    ]
                  ]
                ],
                /* :: */[
                  /* :: */[
                    /* Empty */0,
                    /* :: */[
                      /* Player */[/* P2 */1],
                      /* :: */[
                        /* Player */[/* P2 */1],
                        /* :: */[
                          /* Player */[/* P2 */1],
                          /* [] */0
                        ]
                      ]
                    ]
                  ],
                  /* [] */0
                ]
              ]
            ]
          ]
        ], /* Move */[4]), /* State */[
      /* Win */Block.__(0, [/* P2 */1]),
      /* :: */[
        /* :: */[
          /* Player */[/* P2 */1],
          /* :: */[
            /* Player */[/* P2 */1],
            /* :: */[
              /* Player */[/* P2 */1],
              /* :: */[
                /* Player */[/* P1 */0],
                /* [] */0
              ]
            ]
          ]
        ],
        /* :: */[
          /* :: */[
            /* Empty */0,
            /* :: */[
              /* Empty */0,
              /* :: */[
                /* Empty */0,
                /* :: */[
                  /* Player */[/* P1 */0],
                  /* [] */0
                ]
              ]
            ]
          ],
          /* :: */[
            /* :: */[
              /* Empty */0,
              /* :: */[
                /* Player */[/* P1 */0],
                /* :: */[
                  /* Player */[/* P1 */0],
                  /* :: */[
                    /* Player */[/* P1 */0],
                    /* [] */0
                  ]
                ]
              ]
            ],
            /* :: */[
              /* :: */[
                /* Player */[/* P2 */1],
                /* :: */[
                  /* Player */[/* P2 */1],
                  /* :: */[
                    /* Player */[/* P2 */1],
                    /* :: */[
                      /* Player */[/* P2 */1],
                      /* [] */0
                    ]
                  ]
                ]
              ],
              /* [] */0
            ]
          ]
        ]
      ]
    ], "nextState Win(P2)");

CS17SetupGame$Project3.checkExpect(nextState(/* State */[
          /* Ongoing */Block.__(1, [/* P1 */0]),
          /* :: */[
            /* :: */[
              /* Player */[/* P2 */1],
              /* :: */[
                /* Player */[/* P2 */1],
                /* :: */[
                  /* Player */[/* P2 */1],
                  /* :: */[
                    /* Player */[/* P1 */0],
                    /* [] */0
                  ]
                ]
              ]
            ],
            /* :: */[
              /* :: */[
                /* Player */[/* P2 */1],
                /* :: */[
                  /* Player */[/* P1 */0],
                  /* :: */[
                    /* Player */[/* P2 */1],
                    /* :: */[
                      /* Player */[/* P1 */0],
                      /* [] */0
                    ]
                  ]
                ]
              ],
              /* :: */[
                /* :: */[
                  /* Player */[/* P2 */1],
                  /* :: */[
                    /* Player */[/* P1 */0],
                    /* :: */[
                      /* Player */[/* P1 */0],
                      /* :: */[
                        /* Player */[/* P1 */0],
                        /* [] */0
                      ]
                    ]
                  ]
                ],
                /* :: */[
                  /* :: */[
                    /* Empty */0,
                    /* :: */[
                      /* Player */[/* P2 */1],
                      /* :: */[
                        /* Player */[/* P2 */1],
                        /* :: */[
                          /* Player */[/* P2 */1],
                          /* [] */0
                        ]
                      ]
                    ]
                  ],
                  /* [] */0
                ]
              ]
            ]
          ]
        ], /* Move */[4]), /* State */[
      /* Draw */0,
      /* :: */[
        /* :: */[
          /* Player */[/* P2 */1],
          /* :: */[
            /* Player */[/* P2 */1],
            /* :: */[
              /* Player */[/* P2 */1],
              /* :: */[
                /* Player */[/* P1 */0],
                /* [] */0
              ]
            ]
          ]
        ],
        /* :: */[
          /* :: */[
            /* Player */[/* P2 */1],
            /* :: */[
              /* Player */[/* P1 */0],
              /* :: */[
                /* Player */[/* P2 */1],
                /* :: */[
                  /* Player */[/* P1 */0],
                  /* [] */0
                ]
              ]
            ]
          ],
          /* :: */[
            /* :: */[
              /* Player */[/* P2 */1],
              /* :: */[
                /* Player */[/* P1 */0],
                /* :: */[
                  /* Player */[/* P1 */0],
                  /* :: */[
                    /* Player */[/* P1 */0],
                    /* [] */0
                  ]
                ]
              ]
            ],
            /* :: */[
              /* :: */[
                /* Player */[/* P1 */0],
                /* :: */[
                  /* Player */[/* P2 */1],
                  /* :: */[
                    /* Player */[/* P2 */1],
                    /* :: */[
                      /* Player */[/* P2 */1],
                      /* [] */0
                    ]
                  ]
                ]
              ],
              /* [] */0
            ]
          ]
        ]
      ]
    ], "nextState Draw");

CS17SetupGame$Project3.checkExpect(moveOfString("3"), /* Move */[3], "converts string to a move");

CS17SetupGame$Project3.checkError((function (param) {
        return moveOfString("three");
      }), "string input must be an integer");

CS17SetupGame$Project3.checkError((function (param) {
        return Pervasives.failwith("board cannot be empty");
      }), "board cannot be empty");

CS17SetupGame$Project3.checkExpect(calculatePointsHelper(/* :: */[
          /* Player */[/* P1 */0],
          /* :: */[
            /* Player */[/* P1 */0],
            /* :: */[
              /* Empty */0,
              /* :: */[
                /* Empty */0,
                /* [] */0
              ]
            ]
          ]
        ]), 4, "worth 4 points");

CS17SetupGame$Project3.checkExpect(calculatePointsHelper(/* :: */[
          /* Player */[/* P2 */1],
          /* :: */[
            /* Player */[/* P2 */1],
            /* :: */[
              /* Player */[/* P2 */1],
              /* :: */[
                /* Empty */0,
                /* [] */0
              ]
            ]
          ]
        ]), -16, "worth -16 points");

CS17SetupGame$Project3.checkExpect(calculatePointsHelper(/* :: */[
          /* Player */[/* P2 */1],
          /* :: */[
            /* Player */[/* P2 */1],
            /* :: */[
              /* Player */[/* P2 */1],
              /* :: */[
                /* Player */[/* P1 */0],
                /* [] */0
              ]
            ]
          ]
        ]), 0, "worth 0 points");

CS17SetupGame$Project3.checkExpect(estimateValue(/* State */[
          /* Ongoing */Block.__(1, [/* P1 */0]),
          /* :: */[
            /* :: */[
              /* Player */[/* P2 */1],
              /* :: */[
                /* Player */[/* P2 */1],
                /* :: */[
                  /* Player */[/* P2 */1],
                  /* :: */[
                    /* Player */[/* P1 */0],
                    /* [] */0
                  ]
                ]
              ]
            ],
            /* :: */[
              /* :: */[
                /* Empty */0,
                /* :: */[
                  /* Empty */0,
                  /* :: */[
                    /* Empty */0,
                    /* :: */[
                      /* Player */[/* P1 */0],
                      /* [] */0
                    ]
                  ]
                ]
              ],
              /* :: */[
                /* :: */[
                  /* Empty */0,
                  /* :: */[
                    /* Player */[/* P1 */0],
                    /* :: */[
                      /* Player */[/* P1 */0],
                      /* :: */[
                        /* Player */[/* P1 */0],
                        /* [] */0
                      ]
                    ]
                  ]
                ],
                /* :: */[
                  /* :: */[
                    /* Empty */0,
                    /* :: */[
                      /* Empty */0,
                      /* :: */[
                        /* Player */[/* P2 */1],
                        /* :: */[
                          /* Player */[/* P2 */1],
                          /* [] */0
                        ]
                      ]
                    ]
                  ],
                  /* [] */0
                ]
              ]
            ]
          ]
        ]), 20.0, "estimateValue of 4x4 board P1");

CS17SetupGame$Project3.checkExpect(estimateValue(/* State */[
          /* Ongoing */Block.__(1, [/* P2 */1]),
          /* :: */[
            /* :: */[
              /* Player */[/* P2 */1],
              /* :: */[
                /* Player */[/* P2 */1],
                /* :: */[
                  /* Player */[/* P2 */1],
                  /* :: */[
                    /* Player */[/* P1 */0],
                    /* [] */0
                  ]
                ]
              ]
            ],
            /* :: */[
              /* :: */[
                /* Empty */0,
                /* :: */[
                  /* Empty */0,
                  /* :: */[
                    /* Empty */0,
                    /* :: */[
                      /* Player */[/* P1 */0],
                      /* [] */0
                    ]
                  ]
                ]
              ],
              /* :: */[
                /* :: */[
                  /* Empty */0,
                  /* :: */[
                    /* Player */[/* P1 */0],
                    /* :: */[
                      /* Player */[/* P1 */0],
                      /* :: */[
                        /* Player */[/* P1 */0],
                        /* [] */0
                      ]
                    ]
                  ]
                ],
                /* :: */[
                  /* :: */[
                    /* Empty */0,
                    /* :: */[
                      /* Player */[/* P2 */1],
                      /* :: */[
                        /* Player */[/* P2 */1],
                        /* :: */[
                          /* Player */[/* P2 */1],
                          /* [] */0
                        ]
                      ]
                    ]
                  ],
                  /* [] */0
                ]
              ]
            ]
          ]
        ]), 4.0, "estimateValue of 4x4 board P2");

CS17SetupGame$Project3.checkExpect(estimateValue(/* State */[
          /* Win */Block.__(0, [/* P2 */1]),
          /* :: */[
            /* :: */[
              /* Player */[/* P2 */1],
              /* :: */[
                /* Player */[/* P2 */1],
                /* :: */[
                  /* Player */[/* P2 */1],
                  /* :: */[
                    /* Player */[/* P1 */0],
                    /* [] */0
                  ]
                ]
              ]
            ],
            /* :: */[
              /* :: */[
                /* Empty */0,
                /* :: */[
                  /* Empty */0,
                  /* :: */[
                    /* Empty */0,
                    /* :: */[
                      /* Player */[/* P1 */0],
                      /* [] */0
                    ]
                  ]
                ]
              ],
              /* :: */[
                /* :: */[
                  /* Empty */0,
                  /* :: */[
                    /* Player */[/* P1 */0],
                    /* :: */[
                      /* Player */[/* P1 */0],
                      /* :: */[
                        /* Player */[/* P1 */0],
                        /* [] */0
                      ]
                    ]
                  ]
                ],
                /* :: */[
                  /* :: */[
                    /* Player */[/* P2 */1],
                    /* :: */[
                      /* Player */[/* P2 */1],
                      /* :: */[
                        /* Player */[/* P2 */1],
                        /* :: */[
                          /* Player */[/* P2 */1],
                          /* [] */0
                        ]
                      ]
                    ]
                  ],
                  /* [] */0
                ]
              ]
            ]
          ]
        ]), Number.NEGATIVE_INFINITY, "estimateValue of 4x4 board Win P2");

CS17SetupGame$Project3.checkExpect(estimateValue(/* State */[
          /* Win */Block.__(0, [/* P1 */0]),
          /* :: */[
            /* :: */[
              /* Player */[/* P2 */1],
              /* :: */[
                /* Player */[/* P2 */1],
                /* :: */[
                  /* Player */[/* P2 */1],
                  /* :: */[
                    /* Player */[/* P1 */0],
                    /* [] */0
                  ]
                ]
              ]
            ],
            /* :: */[
              /* :: */[
                /* Empty */0,
                /* :: */[
                  /* Empty */0,
                  /* :: */[
                    /* Empty */0,
                    /* :: */[
                      /* Player */[/* P1 */0],
                      /* [] */0
                    ]
                  ]
                ]
              ],
              /* :: */[
                /* :: */[
                  /* Empty */0,
                  /* :: */[
                    /* Player */[/* P1 */0],
                    /* :: */[
                      /* Player */[/* P1 */0],
                      /* :: */[
                        /* Player */[/* P1 */0],
                        /* [] */0
                      ]
                    ]
                  ]
                ],
                /* :: */[
                  /* :: */[
                    /* Player */[/* P1 */0],
                    /* :: */[
                      /* Player */[/* P1 */0],
                      /* :: */[
                        /* Player */[/* P1 */0],
                        /* :: */[
                          /* Player */[/* P1 */0],
                          /* [] */0
                        ]
                      ]
                    ]
                  ],
                  /* [] */0
                ]
              ]
            ]
          ]
        ]), Number.POSITIVE_INFINITY, "estimateValue of 4x4 board Win P1");

CS17SetupGame$Project3.checkExpect(estimateValue(/* State */[
          /* Draw */0,
          /* :: */[
            /* :: */[
              /* Player */[/* P2 */1],
              /* :: */[
                /* Player */[/* P2 */1],
                /* :: */[
                  /* Player */[/* P2 */1],
                  /* :: */[
                    /* Player */[/* P1 */0],
                    /* [] */0
                  ]
                ]
              ]
            ],
            /* :: */[
              /* :: */[
                /* Empty */0,
                /* :: */[
                  /* Empty */0,
                  /* :: */[
                    /* Empty */0,
                    /* :: */[
                      /* Player */[/* P1 */0],
                      /* [] */0
                    ]
                  ]
                ]
              ],
              /* :: */[
                /* :: */[
                  /* Empty */0,
                  /* :: */[
                    /* Player */[/* P1 */0],
                    /* :: */[
                      /* Player */[/* P1 */0],
                      /* :: */[
                        /* Player */[/* P1 */0],
                        /* [] */0
                      ]
                    ]
                  ]
                ],
                /* :: */[
                  /* :: */[
                    /* Player */[/* P1 */0],
                    /* :: */[
                      /* Player */[/* P1 */0],
                      /* :: */[
                        /* Player */[/* P1 */0],
                        /* :: */[
                          /* Player */[/* P1 */0],
                          /* [] */0
                        ]
                      ]
                    ]
                  ],
                  /* [] */0
                ]
              ]
            ]
          ]
        ]), 0.0, "estimateValue of 4x4 board Draw");

var MyGame = {
  stringOfPlayer: stringOfPlayer,
  stringOfState: stringOfState,
  stringOfMove: stringOfMove,
  initialState: initialState,
  legalMoves: legalMoves,
  gameStatus: gameStatus,
  nextState: nextState,
  moveOfString: moveOfString,
  estimateValue: estimateValue
};

exports.Connect4 = Connect4;
exports.MyGame = MyGame;
/* initialState Not a pure module */
