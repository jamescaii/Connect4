// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var List = require("bs-platform/lib/js/list.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Pervasives = require("bs-platform/lib/js/pervasives.js");
var Connect4$Project3 = require("./Connect4.bs.js");
var CS17SetupGame$Project3 = require("./CS17SetupGame.bs.js");

function AIPlayer(MyGame) {
  var max = function (_lst) {
    while(true) {
      var lst = _lst;
      if (lst) {
        var match = lst[1];
        var item = lst[0];
        if (match) {
          var tl = match[1];
          var hd2 = match[0];
          if (item > hd2) {
            _lst = /* :: */[
              item,
              tl
            ];
            continue ;
          } else {
            _lst = /* :: */[
              hd2,
              tl
            ];
            continue ;
          }
        } else {
          return item;
        }
      } else {
        return 0.0;
      }
    };
  };
  var min = function (_lst) {
    while(true) {
      var lst = _lst;
      if (lst) {
        var match = lst[1];
        var item = lst[0];
        if (match) {
          var tl = match[1];
          var hd2 = match[0];
          if (item < hd2) {
            _lst = /* :: */[
              item,
              tl
            ];
            continue ;
          } else {
            _lst = /* :: */[
              hd2,
              tl
            ];
            continue ;
          }
        } else {
          return item;
        }
      } else {
        return 0.0;
      }
    };
  };
  var maxmin = function (_lst, flt, _v) {
    while(true) {
      var v = _v;
      var lst = _lst;
      if (lst) {
        if (flt === lst[0]) {
          return v;
        } else {
          _v = CS17SetupGame$Project3.$plus(v, 1);
          _lst = lst[1];
          continue ;
        }
      } else {
        return Pervasives.failwith("cannot be empty");
      }
    };
  };
  var nextAI = function (s, v) {
    if (v !== 0) {
      var match = Curry._1(MyGame.gameStatus, s);
      if (typeof match === "number") {
        return 0.0;
      } else if (match.tag) {
        if (match[0]) {
          return min(List.map((function (x) {
                            return nextAI(x, CS17SetupGame$Project3.$neg(v, 1));
                          }), List.map((function (x) {
                                return Curry._2(MyGame.nextState, s, x);
                              }), Curry._1(MyGame.legalMoves, s))));
        } else {
          return max(List.map((function (x) {
                            return nextAI(x, CS17SetupGame$Project3.$neg(v, 1));
                          }), List.map((function (x) {
                                return Curry._2(MyGame.nextState, s, x);
                              }), Curry._1(MyGame.legalMoves, s))));
        }
      } else if (match[0]) {
        return Number.NEGATIVE_INFINITY;
      } else {
        return Number.POSITIVE_INFINITY;
      }
    } else {
      return Curry._1(MyGame.estimateValue, s);
    }
  };
  var nextMove = function (s) {
    var fltLst = List.map((function (x) {
            return nextAI(x, 3);
          }), List.map((function (x) {
                return Curry._2(MyGame.nextState, s, x);
              }), Curry._1(MyGame.legalMoves, s)));
    var match = Curry._1(MyGame.gameStatus, s);
    if (typeof match === "number" || !match.tag) {
      return Pervasives.failwith("cannot be this input");
    } else if (match[0]) {
      return List.nth(Curry._1(MyGame.legalMoves, s), maxmin(fltLst, min(fltLst), 0));
    } else {
      return List.nth(Curry._1(MyGame.legalMoves, s), maxmin(fltLst, max(fltLst), 0));
    }
  };
  return {
          PlayerGame: MyGame,
          max: max,
          min: min,
          maxmin: maxmin,
          nextAI: nextAI,
          nextMove: nextMove
        };
}

var MyGame_stringOfPlayer = Connect4$Project3.Connect4.stringOfPlayer;

var MyGame_stringOfState = Connect4$Project3.Connect4.stringOfState;

var MyGame_stringOfMove = Connect4$Project3.Connect4.stringOfMove;

var MyGame_initialState = Connect4$Project3.Connect4.initialState;

var MyGame_legalMoves = Connect4$Project3.Connect4.legalMoves;

var MyGame_gameStatus = Connect4$Project3.Connect4.gameStatus;

var MyGame_nextState = Connect4$Project3.Connect4.nextState;

var MyGame_moveOfString = Connect4$Project3.Connect4.moveOfString;

var MyGame_estimateValue = Connect4$Project3.Connect4.estimateValue;

var MyGame = {
  stringOfPlayer: MyGame_stringOfPlayer,
  stringOfState: MyGame_stringOfState,
  stringOfMove: MyGame_stringOfMove,
  initialState: MyGame_initialState,
  legalMoves: MyGame_legalMoves,
  gameStatus: MyGame_gameStatus,
  nextState: MyGame_nextState,
  moveOfString: MyGame_moveOfString,
  estimateValue: MyGame_estimateValue
};

function max(_lst) {
  while(true) {
    var lst = _lst;
    if (lst) {
      var match = lst[1];
      var item = lst[0];
      if (match) {
        var tl = match[1];
        var hd2 = match[0];
        if (item > hd2) {
          _lst = /* :: */[
            item,
            tl
          ];
          continue ;
        } else {
          _lst = /* :: */[
            hd2,
            tl
          ];
          continue ;
        }
      } else {
        return item;
      }
    } else {
      return 0.0;
    }
  };
}

function min(_lst) {
  while(true) {
    var lst = _lst;
    if (lst) {
      var match = lst[1];
      var item = lst[0];
      if (match) {
        var tl = match[1];
        var hd2 = match[0];
        if (item < hd2) {
          _lst = /* :: */[
            item,
            tl
          ];
          continue ;
        } else {
          _lst = /* :: */[
            hd2,
            tl
          ];
          continue ;
        }
      } else {
        return item;
      }
    } else {
      return 0.0;
    }
  };
}

function maxmin(_lst, flt, _v) {
  while(true) {
    var v = _v;
    var lst = _lst;
    if (lst) {
      if (flt === lst[0]) {
        return v;
      } else {
        _v = CS17SetupGame$Project3.$plus(v, 1);
        _lst = lst[1];
        continue ;
      }
    } else {
      return Pervasives.failwith("cannot be empty");
    }
  };
}

function nextAI(s, v) {
  if (v !== 0) {
    var match = Curry._1(MyGame_gameStatus, s);
    if (typeof match === "number") {
      return 0.0;
    } else if (match.tag) {
      if (match[0]) {
        return min(List.map((function (x) {
                          return nextAI(x, CS17SetupGame$Project3.$neg(v, 1));
                        }), List.map((function (x) {
                              return Curry._2(MyGame_nextState, s, x);
                            }), Curry._1(MyGame_legalMoves, s))));
      } else {
        return max(List.map((function (x) {
                          return nextAI(x, CS17SetupGame$Project3.$neg(v, 1));
                        }), List.map((function (x) {
                              return Curry._2(MyGame_nextState, s, x);
                            }), Curry._1(MyGame_legalMoves, s))));
      }
    } else if (match[0]) {
      return Number.NEGATIVE_INFINITY;
    } else {
      return Number.POSITIVE_INFINITY;
    }
  } else {
    return Curry._1(MyGame_estimateValue, s);
  }
}

function nextMove(s) {
  var fltLst = List.map((function (x) {
          return nextAI(x, 3);
        }), List.map((function (x) {
              return Curry._2(MyGame_nextState, s, x);
            }), Curry._1(MyGame_legalMoves, s)));
  var match = Curry._1(MyGame_gameStatus, s);
  if (typeof match === "number" || !match.tag) {
    return Pervasives.failwith("cannot be this input");
  } else if (match[0]) {
    return List.nth(Curry._1(MyGame_legalMoves, s), maxmin(fltLst, min(fltLst), 0));
  } else {
    return List.nth(Curry._1(MyGame_legalMoves, s), maxmin(fltLst, max(fltLst), 0));
  }
}

var TestAIPlayer = {
  PlayerGame: MyGame,
  max: max,
  min: min,
  maxmin: maxmin,
  nextAI: nextAI,
  nextMove: nextMove
};

CS17SetupGame$Project3.checkExpect(max(/* :: */[
          1,
          /* :: */[
            2,
            /* :: */[
              3,
              /* :: */[
                4,
                /* [] */0
              ]
            ]
          ]
        ]), 4, "max of four floats");

CS17SetupGame$Project3.checkExpect(max(/* :: */[
          9,
          /* :: */[
            2.2,
            /* :: */[
              8,
              /* :: */[
                0,
                /* :: */[
                  3.0,
                  /* :: */[
                    3.0,
                    /* [] */0
                  ]
                ]
              ]
            ]
          ]
        ]), 9, "max of multiple");

CS17SetupGame$Project3.checkExpect(min(/* :: */[
          1,
          /* :: */[
            2,
            /* :: */[
              3,
              /* :: */[
                4,
                /* [] */0
              ]
            ]
          ]
        ]), 1, "min of four floats");

CS17SetupGame$Project3.checkExpect(min(/* :: */[
          9,
          /* :: */[
            2.2,
            /* :: */[
              8,
              /* :: */[
                0,
                /* :: */[
                  3.0,
                  /* :: */[
                    3.0,
                    /* [] */0
                  ]
                ]
              ]
            ]
          ]
        ]), 0, "min of multiple");

CS17SetupGame$Project3.checkExpect(maxmin(/* :: */[
          1,
          /* :: */[
            2,
            /* :: */[
              3,
              /* :: */[
                4,
                /* [] */0
              ]
            ]
          ]
        ], 4, 4), 7, "maxmin list of four floats");

CS17SetupGame$Project3.checkExpect(maxmin(/* :: */[
          3,
          /* :: */[
            2,
            /* :: */[
              3,
              /* :: */[
                4,
                /* :: */[
                  8.0,
                  /* [] */0
                ]
              ]
            ]
          ]
        ], 8, 7), 11, "maxmin list of five floats");

CS17SetupGame$Project3.checkError((function (param) {
        return (function (param, param$1) {
            return maxmin(/* [] */0, param, param$1);
          });
      }), "cannot be empty");

var TestGame = 0;

exports.AIPlayer = AIPlayer;
exports.TestGame = TestGame;
exports.TestAIPlayer = TestAIPlayer;
/*  Not a pure module */
